package com.ctf.log4droid.mt_body;

import com.ctf.log4droid.protobuf.log4droid;
import com.ctf.log4droid.protobuf.log4droid._cell;
import com.ctf.log4droid.protobuf.log4droid._cell.Builder;
import com.ctf.log4droid.protobuf.log4droid.NETWORK_TYPE;
import com.ctf.log4droid.protobuf.log4droid.RSQ;
import com.ctf.log4droid.protobuf.log4droid._cell.RIL_REG_STATE;
import com.google.protobuf.InvalidProtocolBufferException;
import io.netty.buffer.ByteBuf;

import java.io.Serializable;

/*
 * This file is auto generated by *proto_convert*
 *  and should *NOT* be modified manually!!!
 */
public class Cell  implements Serializable{
    //---------------------------------------------------------------------------
    // ALL fields (private)
    //---------------------------------------------------------------------------
    //required fields

    //optional fields
    private int plmn;
    private NETWORK_TYPE rat;
    private int rssi;
    private RSQ rsq;
    private int lac;
    private int cid;
    private RIL_REG_STATE cs_status;
    private int cs_errno;
    private RIL_REG_STATE ps_status;
    private int ps_errno;
    private int up_speed;
    private int dn_speed;
    private float snr;

    //---------------------------------------------------------------------------
    // DEFAULT value for optional fields (private static final)
    //---------------------------------------------------------------------------
    private static final int DEFAULT_PLMN = -1;
    private static final NETWORK_TYPE DEFAULT_RAT = null;
    private static final int DEFAULT_RSSI = -1;
    private static final RSQ DEFAULT_RSQ = null;
    private static final int DEFAULT_LAC = -1;
    private static final int DEFAULT_CID = -1;
    private static final RIL_REG_STATE DEFAULT_CS_STATUS = null;
    private static final int DEFAULT_CS_ERRNO = -1;
    private static final RIL_REG_STATE DEFAULT_PS_STATUS = null;
    private static final int DEFAULT_PS_ERRNO = -1;
    private static final int DEFAULT_UP_SPEED = -1;
    private static final int DEFAULT_DN_SPEED = -1;
    private static final float DEFAULT_SNR = -1.0f;

    //---------------------------------------------------------------------------
    // Constructed Function
    //---------------------------------------------------------------------------
    // <> is *required*
    public Cell() {
        this(DEFAULT_PLMN, DEFAULT_RAT, DEFAULT_RSSI, DEFAULT_RSQ, DEFAULT_LAC, DEFAULT_CID, DEFAULT_CS_STATUS, DEFAULT_CS_ERRNO, DEFAULT_PS_STATUS, DEFAULT_PS_ERRNO, DEFAULT_UP_SPEED, DEFAULT_DN_SPEED, DEFAULT_SNR);
    }

    public Cell(int plmn, NETWORK_TYPE rat, int rssi, RSQ rsq, int lac, int cid, RIL_REG_STATE cs_status, int cs_errno, RIL_REG_STATE ps_status, int ps_errno, int up_speed, int dn_speed, float snr) {
        this.plmn = plmn;
        this.rat = rat;
        this.rssi = rssi;
        this.rsq = rsq;
        this.lac = lac;
        this.cid = cid;
        this.cs_status = cs_status;
        this.cs_errno = cs_errno;
        this.ps_status = ps_status;
        this.ps_errno = ps_errno;
        this.up_speed = up_speed;
        this.dn_speed = dn_speed;
        this.snr = snr;
    }

    //---------------------------------------------------------------------------
    // decode Constructed Function
    //---------------------------------------------------------------------------

    public static Cell parseFrom(byte[] bytes) throws InvalidProtocolBufferException {
        _cell cell = _cell.parseFrom(bytes);

        int plmn = cell.getPlmn();
        NETWORK_TYPE rat = cell.getRat();
        int rssi = cell.getRssi();
        RSQ rsq = cell.getRsq();
        int lac = cell.getLac();
        int cid = cell.getCid();
        RIL_REG_STATE cs_status = cell.getCsStatus();
        int cs_errno = cell.getCsErrno();
        RIL_REG_STATE ps_status = cell.getPsStatus();
        int ps_errno = cell.getPsErrno();
        int up_speed = cell.getUpSpeed();
        int dn_speed = cell.getDnSpeed();
        float snr = cell.getSnr();


        Cell _ret = new Cell(plmn, rat, rssi, rsq, lac, cid, cs_status, cs_errno, ps_status,ps_errno,up_speed,dn_speed,snr);
        return _ret;
    }

    public Cell(log4droid._cell cell) {
        //decode with required fields
        this();
        //---------------------------
        //optional fields
        if (cell.hasPlmn()) {
            this.plmn = cell.getPlmn();
        }
        if (cell.hasRat()) {
            this.rat = cell.getRat();
        }
        if (cell.hasRssi()) {
            this.rssi = cell.getRssi();
        }
        if (cell.hasRsq()) {
            this.rsq = cell.getRsq();
        }
        if (cell.hasLac()) {
            this.lac = cell.getLac();
        }
        if (cell.hasCid()) {
            this.cid = cell.getCid();
        }
        if (cell.hasCsStatus()) {
            this.cs_status = cell.getCsStatus();
        }
        if (cell.hasCsErrno()) {
            this.cs_errno = cell.getCsErrno();
        }
        if (cell.hasPsStatus()) {
            this.ps_status = cell.getPsStatus();
        }
        if (cell.hasPsErrno()) {
            this.ps_errno = cell.getPsErrno();
        }
        if (cell.hasUpSpeed()) {
            this.up_speed = cell.getUpSpeed();
        }
        if (cell.hasDnSpeed()) {
            this.dn_speed = cell.getDnSpeed();
        }
        if (cell.hasSnr()) {
            this.snr = cell.getSnr();
        }
    }

    //---------------------------------------------------------------------------
    // getter Functions
    //---------------------------------------------------------------------------
    //required fields

    //optional fields
    public boolean hasPlmn() {
        return (this.plmn != DEFAULT_PLMN);
    }
    public int getPlmn() {
        return this.plmn;
    }
    public boolean hasRat() {
        return (this.rat != DEFAULT_RAT);
    }
    public NETWORK_TYPE getRat() {
        return this.rat;
    }
    public boolean hasRssi() {
        return (this.rssi != DEFAULT_RSSI);
    }
    public int getRssi() {
        return this.rssi;
    }
    public boolean hasRsq() {
        return (this.rsq != DEFAULT_RSQ);
    }
    public RSQ getRsq() {
        return this.rsq;
    }
    public boolean hasLac() {
        return (this.lac != DEFAULT_LAC);
    }
    public int getLac() {
        return this.lac;
    }
    public boolean hasCid() {
        return (this.cid != DEFAULT_CID);
    }
    public int getCid() {
        return this.cid;
    }
    public boolean hasCsStatus() {
        return (this.cs_status != DEFAULT_CS_STATUS);
    }
    public RIL_REG_STATE getCsStatus() {
        return this.cs_status;
    }
    public boolean hasCsErrno() {
        return (this.cs_errno != DEFAULT_CS_ERRNO);
    }
    public int getCsErrno() {
        return this.cs_errno;
    }
    public boolean hasPsStatus() {
        return (this.ps_status != DEFAULT_PS_STATUS);
    }
    public RIL_REG_STATE getPsStatus() {
        return this.ps_status;
    }
    public boolean hasPsErrno() {
        return (this.ps_errno != DEFAULT_PS_ERRNO);
    }
    public int getPsErrno() {
        return this.ps_errno;
    }
    public boolean hasUpSpeed() {
        return (this.up_speed != DEFAULT_UP_SPEED);
    }
    public int getUpSpeed() {
        return this.up_speed;
    }
    public boolean hasDnSpeed() {
        return (this.dn_speed != DEFAULT_DN_SPEED);
    }
    public int getDnSpeed() {
        return this.dn_speed;
    }
    public boolean hasSnr() {
        return (this.snr != DEFAULT_SNR);
    }
    public float getSnr() {
        return this.snr;
    }

    //---------------------------------------------------------------------------
    // setter Functions
    //---------------------------------------------------------------------------
    public void setPlmn(int plmn){
        this.plmn = plmn;
    }
    public void setRat(NETWORK_TYPE rat){
        this.rat = rat;
    }
    public void setRssi(int rssi){
        this.rssi = rssi;
    }
    public void setRsq(RSQ rsq){
        this.rsq = rsq;
    }
    public void setLac(int lac){
        this.lac = lac;
    }
    public void setCid(int cid){
        this.cid = cid;
    }
    public void setCsStatus(RIL_REG_STATE cs_status){
        this.cs_status = cs_status;
    }
    public void setCsErrno(int cs_errno){
        this.cs_errno = cs_errno;
    }
    public void setPsStatus(RIL_REG_STATE ps_status){
        this.ps_status = ps_status;
    }
    public void setPsErrno(int ps_errno){
        this.ps_errno = ps_errno;
    }
    public void setUpSpeed(int up_speed){
        this.up_speed = up_speed;
    }
    public void setDnSpeed(int dn_speed){
        this.dn_speed = dn_speed;
    }
    public void setSnr(float snr){
        this.snr = snr;
    }
   //--------------------------------------
   // encode (Java obj => Proto builder)
   //--------------------------------------
    public log4droid._cell.Builder toBuilder() {
        log4droid._cell.Builder builder = log4droid._cell.newBuilder();

        //required fields

        //optional fields
        if (hasPlmn()) {
            builder.setPlmn(plmn);
        }
        if (hasRat()) {
            builder.setRat(rat);
        }
        if (hasRssi()) {
            builder.setRssi(rssi);
        }
        if (hasRsq()) {
            builder.setRsq(rsq);
        }
        if (hasLac()) {
            builder.setLac(lac);
        }
        if (hasCid()) {
            builder.setCid(cid);
        }
        if (hasCsStatus()) {
            builder.setCsStatus(cs_status);
        }
        if (hasCsErrno()) {
            builder.setCsErrno(cs_errno);
        }
        if (hasPsStatus()) {
            builder.setPsStatus(ps_status);
        }
        if (hasPsErrno()) {
            builder.setPsErrno(ps_errno);
        }
        if (hasUpSpeed()) {
            builder.setUpSpeed(up_speed);
        }
        if (hasDnSpeed()) {
            builder.setDnSpeed(dn_speed);
        }
        if (hasSnr()) {
            builder.setSnr(snr);
        }

        //return
        return builder;
    }


    public int toBytes(ByteBuf buf) {
        log4droid._cell.Builder builder = log4droid._cell.newBuilder();

        //required fields

        //optional fields
        if (hasPlmn()) {
            builder.setPlmn(plmn);
        }
        if (hasRat()) {
            builder.setRat(rat);
        }
        if (hasRssi()) {
            builder.setRssi(rssi);
        }
        if (hasRsq()) {
            builder.setRsq(rsq);
        }
        if (hasLac()) {
            builder.setLac(lac);
        }
        if (hasCid()) {
            builder.setCid(cid);
        }
        if (hasCsStatus()) {
            builder.setCsStatus(cs_status);
        }
        if (hasCsErrno()) {
            builder.setCsErrno(cs_errno);
        }
        if (hasPsStatus()) {
            builder.setPsStatus(ps_status);
        }
        if (hasPsErrno()) {
            builder.setPsErrno(ps_errno);
        }
        if (hasUpSpeed()) {
            builder.setUpSpeed(up_speed);
        }
        if (hasDnSpeed()) {
            builder.setDnSpeed(dn_speed);
        }
        if (hasSnr()) {
            builder.setSnr(snr);
        }

        byte[] bytes = builder.build().toByteArray();
        buf.writeBytes(bytes);
        return bytes.length;
    }

    //---------------------------------------------------------------------------
    // toString Function
    //---------------------------------------------------------------------------
    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();

        sb.append("Cell { ");

        //required fields

        //optional fields
        if (hasPlmn()) {
            sb.append("plmn:").append(plmn).append(",");
        }
        if (hasRat()) {
            sb.append("rat:").append(rat).append(",");
        }
        if (hasRssi()) {
            sb.append("rssi:").append(rssi).append(",");
        }
        if (hasRsq()) {
            sb.append("rsq:").append(rsq).append(",");
        }
        if (hasLac()) {
            sb.append("lac:").append(lac).append(",");
        }
        if (hasCid()) {
            sb.append("cid:").append(cid).append(",");
        }
        if (hasCsStatus()) {
            sb.append("cs_status:").append(cs_status).append(",");
        }
        if (hasCsErrno()) {
            sb.append("cs_errno:").append(cs_errno).append(",");
        }
        if (hasPsStatus()) {
            sb.append("ps_status:").append(ps_status).append(",");
        }
        if (hasPsErrno()) {
            sb.append("ps_errno:").append(ps_errno).append(",");
        }
        if (hasUpSpeed()) {
            sb.append("up_speed:").append(up_speed).append(",");
        }
        if (hasDnSpeed()) {
            sb.append("dn_speed:").append(dn_speed).append(",");
        }
        if (hasSnr()) {
            sb.append("snr:").append(snr).append(",");
        }

        //remove last ','
        sb.setLength(sb.length() - 1);

        sb.append(" }");

        return sb.toString();
    }
}

