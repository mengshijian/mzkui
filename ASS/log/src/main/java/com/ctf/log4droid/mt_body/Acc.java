package com.ctf.log4droid.mt_body;

import com.ctf.log4droid.protobuf.log4droid._acc;
import com.ctf.log4droid.protobuf.log4droid._acc.Builder;
import com.ctf.log4droid.protobuf.log4droid._acc.MOTION;
import com.google.protobuf.InvalidProtocolBufferException;
import io.netty.buffer.ByteBuf;

import java.io.Serializable;

/*
 * This file is auto generated by *proto_convert*
 *  and should *NOT* be modified manually!!!
 */
public class Acc implements Serializable {
    //---------------------------------------------------------------------------
    // ALL fields (private)
    //---------------------------------------------------------------------------
    //required fields

    //optional fields
    private MOTION motion;
    private float x;
    private float y;
    private float z;
    private String version;

    //---------------------------------------------------------------------------
    // DEFAULT value for optional fields (private static final)
    //---------------------------------------------------------------------------
    private static final MOTION DEFAULT_MOTION = null;
    private static final float DEFAULT_X = -1.0f;
    private static final float DEFAULT_Y = -1.0f;
    private static final float DEFAULT_Z = -1.0f;
    private static final String DEFAULT_VERSION = null;

    //---------------------------------------------------------------------------
    // Constructed Function
    //---------------------------------------------------------------------------
    // <> is *required*
    public Acc() {
        this(DEFAULT_MOTION, DEFAULT_X, DEFAULT_Y, DEFAULT_Z, DEFAULT_VERSION);
    }

    public static Acc parseFrom(byte[] bytes) throws InvalidProtocolBufferException {
        _acc acc = _acc.parseFrom(bytes);
        MOTION _motton = acc.getMotion();
        float _x = acc.getX();
        float _y = acc.getY();
        float _z = acc.getZ();
        String _version = acc.getVersion();
        Acc _ret = new Acc(_motton, _x, _y, _z, _version);
        return _ret;
    }

    public int toBytes(ByteBuf buf) {
        Builder builder = _acc.newBuilder();
        builder.setMotion(this.motion);
        builder.setX(this.x);
        builder.setY(this.y);
        builder.setZ(this.z);
        builder.setVersion(this.version);

        byte[] bytes = builder.build().toByteArray();
        buf.writeBytes(bytes);
        return bytes.length;
    }

    public Acc(_acc acc) {
        //decode with required fields
        this();
        //---------------------------
        //optional fields
        if (acc.hasMotion()) {
            this.motion = acc.getMotion();
        }
        if (acc.hasX()) {
            this.x = acc.getX();
        }
        if (acc.hasY()) {
            this.y = acc.getY();
        }
        if (acc.hasZ()) {
            this.z = acc.getZ();
        }
        if (acc.hasVersion()) {
            this.version = acc.getVersion();
        }
    }

    public Acc(MOTION motion, float x, float y, float z, String version) {
        this.motion = motion;
        this.x = x;
        this.y = y;
        this.z = z;
        this.version = version;
    }


    //---------------------------------------------------------------------------
    // getter Functions
    //---------------------------------------------------------------------------
    //required fields

    //optional fields
    public boolean hasMotion() {
        return (this.motion != DEFAULT_MOTION);
    }

    public MOTION getMotion() {
        return this.motion;
    }

    public boolean hasX() {
        return (this.x != DEFAULT_X);
    }

    public float getX() {
        return this.x;
    }

    public boolean hasY() {
        return (this.y != DEFAULT_Y);
    }

    public float getY() {
        return this.y;
    }

    public boolean hasZ() {
        return (this.z != DEFAULT_Z);
    }

    public float getZ() {
        return this.z;
    }

    public boolean hasVersion() {
        return (this.version != DEFAULT_VERSION);
    }

    public String getVersion() {
        return this.version;
    }

    //---------------------------------------------------------------------------
    // setter Functions
    //---------------------------------------------------------------------------
    public void setMotion(MOTION motion) {
        this.motion = motion;
    }

    public void setX(float x) {
        this.x = x;
    }

    public void setY(float y) {
        this.y = y;
    }

    public void setZ(float z) {
        this.z = z;
    }

    public void setVersion(String version) {
        this.version = version;
    }

    public _acc.Builder toBuilder() {
        _acc.Builder builder = _acc.newBuilder();

        //required fields

        //optional fields
        if (hasMotion()) {
            builder.setMotion(motion);
        }
        if (hasX()) {
            builder.setX(x);
        }
        if (hasY()) {
            builder.setY(y);
        }
        if (hasZ()) {
            builder.setZ(z);
        }
        if (hasVersion()) {
            builder.setVersion(version);
        }

        //return
        return builder;
    }
    //--------------------------------------
    // encode (Java obj => Proto builder)
    //--------------------------------------
    //---------------------------------------------------------------------------
    // toString Function
    //---------------------------------------------------------------------------
    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();

        sb.append("Acc { ");

        //required fields

        //optional fields
        if (hasMotion()) {
            sb.append("motion:").append(motion).append(",");
        }
        if (hasX()) {
            sb.append("x:").append(x).append(",");
        }
        if (hasY()) {
            sb.append("y:").append(y).append(",");
        }
        if (hasZ()) {
            sb.append("z:").append(z).append(",");
        }
        if (hasVersion()) {
            sb.append("version:").append(version).append(",");
        }

        //remove last ','
        sb.setLength(sb.length() - 1);

        sb.append(" }");

        return sb.toString();
    }
}

