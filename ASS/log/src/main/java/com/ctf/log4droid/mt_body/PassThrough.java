package com.ctf.log4droid.mt_body;

import java.io.*;
import com.google.protobuf.ByteString;
import com.ctf.ass_public.utils.ConvUtils;
import com.ctf.log4droid.protobuf.log4droid;
import com.google.protobuf.ByteString;
import java.util.ArrayList;
import com.ctf.log4droid.protobuf.log4droid.GRADE;
import com.ctf.log4droid.protobuf.log4droid.LEVEL;
import com.ctf.log4droid.protobuf.log4droid.TRANSPORT;
import com.ctf.log4droid.protobuf.log4droid.NETWORK_TYPE;
import com.ctf.log4droid.protobuf.log4droid.RSQ;
import com.google.protobuf.InvalidProtocolBufferException;
import io.netty.buffer.ByteBuf;

/*
 * This file is auto generated by *proto_convert*
 *  and should *NOT* be modified manually!!!
 */
public class PassThrough  implements Serializable{
    //---------------------------------------------------------------------------
    // ALL fields (private)
    //---------------------------------------------------------------------------
    //required fields

    //optional fields
    private String src;
    private String dest;
    private byte[] data;
    private int crc16;

    //---------------------------------------------------------------------------
    // DEFAULT value for optional fields (private static final)
    //---------------------------------------------------------------------------
    private static final String DEFAULT_SRC = null;
    private static final String DEFAULT_DEST = null;
    private static final byte[] DEFAULT_DATA = null;
    private static final int DEFAULT_CRC16 = -1;

    //---------------------------------------------------------------------------
    // Constructed Function
    //---------------------------------------------------------------------------
    // <> is *required*
    public PassThrough() {
        this(DEFAULT_SRC, DEFAULT_DEST, DEFAULT_DATA, DEFAULT_CRC16);
    }

    public PassThrough(String src, String dest, byte[] data, int crc16) {
        this.src = src;
        this.dest = dest;
        this.data = data;
        this.crc16 = crc16;
    }

    //---------------------------------------------------------------------------
    // decode Constructed Function
    //---------------------------------------------------------------------------

    public static PassThrough parseFrom(byte[] bytes) throws InvalidProtocolBufferException {
        log4droid.PassThrough parseFrom = log4droid.PassThrough.parseFrom(bytes);


        String src = parseFrom.getSrc();
        String dest = parseFrom.getDest();
        byte[] data = parseFrom.getData().toByteArray();
        int crc16 = parseFrom.getCrc16();

        PassThrough _ret = new PassThrough(src,dest,data,crc16);
        return _ret;
    }

    public PassThrough(log4droid.PassThrough assThrough) {
        //decode with required fields
        this();
        //---------------------------
        //optional fields
        if (assThrough.hasSrc()) {
            this.src = assThrough.getSrc();
        }
        if (assThrough.hasDest()) {
            this.dest = assThrough.getDest();
        }
        if (assThrough.hasData()) {
            this.data = assThrough.getData().toByteArray();
        }
        if (assThrough.hasCrc16()) {
            this.crc16 = assThrough.getCrc16();
        }
    }

    //---------------------------------------------------------------------------
    // getter Functions
    //---------------------------------------------------------------------------
    //required fields

    //optional fields
    public boolean hasSrc() {
        return (this.src != DEFAULT_SRC);
    }
    public String getSrc() {
        return this.src;
    }
    public boolean hasDest() {
        return (this.dest != DEFAULT_DEST);
    }
    public String getDest() {
        return this.dest;
    }
    public boolean hasData() {
        return (this.data != DEFAULT_DATA);
    }
    public byte[] getData() {
        return this.data;
    }
    public boolean hasCrc16() {
        return (this.crc16 != DEFAULT_CRC16);
    }
    public int getCrc16() {
        return this.crc16;
    }

    //---------------------------------------------------------------------------
    // setter Functions
    //---------------------------------------------------------------------------
    public void setSrc(String src){
        this.src = src;
    }
    public void setDest(String dest){
        this.dest = dest;
    }
    public void setData(byte[] data){
        this.data = data;
    }
    public void setCrc16(int crc16){
        this.crc16 = crc16;
    }
   //--------------------------------------
   // encode (Java obj => Proto builder)
   //--------------------------------------
    public log4droid.PassThrough.Builder toBuilder() {
        log4droid.PassThrough.Builder builder = log4droid.PassThrough.newBuilder();
        
        //required fields
        
        //optional fields
        if (hasSrc()) {
            builder.setSrc(src);
        }
        if (hasDest()) {
            builder.setDest(dest);
        }
        if (hasData()) {
            builder.setData(ByteString.copyFrom(data));
        }
        if (hasCrc16()) {
            builder.setCrc16(crc16);
        }

        //return
        return builder;
    }

    public int toBytes(ByteBuf buf) {
        log4droid.PassThrough.Builder builder = log4droid.PassThrough.newBuilder();

        //required fields

        //optional fields
        if (hasSrc()) {
            builder.setSrc(src);
        }
        if (hasDest()) {
            builder.setDest(dest);
        }
        if (hasData()) {
            builder.setData(ByteString.copyFrom(data));
        }
        if (hasCrc16()) {
            builder.setCrc16(crc16);
        }

        byte[] bytes = builder.build().toByteArray();
        buf.writeBytes(bytes);
        return bytes.length;
    }


    //---------------------------------------------------------------------------
    // toString Function
    //---------------------------------------------------------------------------
    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();

        sb.append("PassThrough { ");

        //required fields

        //optional fields
        if (hasSrc()) {
            sb.append("src:").append(src).append(",");
        }
        if (hasDest()) {
            sb.append("dest:").append(dest).append(",");
        }
        if (hasData()) {
            sb.append("data:").append(ConvUtils.bytesToHexStr(data)).append(",");
        }
        if (hasCrc16()) {
            sb.append("crc16:").append(crc16).append(",");
        }

        //remove last ','
        sb.setLength(sb.length() - 1);

        sb.append(" }");

        return sb.toString();
    }
}

