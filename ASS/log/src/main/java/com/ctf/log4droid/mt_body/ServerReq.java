package com.ctf.log4droid.mt_body;

import com.ctf.ass_codec.struct.MessageBody;
import com.ctf.log4droid.protobuf.log4droid;
import com.google.protobuf.InvalidProtocolBufferException;
import io.netty.buffer.ByteBuf;

/*
 * This file is auto generated by *proto_convert*
 *  and should *NOT* be modified manually!!!
 */
public class ServerReq extends MessageBody {
    //---------------------------------------------------------------------------
    // ALL fields (private)
    //---------------------------------------------------------------------------
    //required fields

    //optional fields
    private Codes cause;
    private int exec_exit;
    private String exec;
    private ExtractLog extractLog;
    private int ap_fixinfo;
    private int modem_fixinfo;
    private int mcwill_fixinfo;
    private int wlan_fixinfo;
    private int acc_fixinfo;
    private int gps_fixinfo;

    //---------------------------------------------------------------------------
    // DEFAULT value for optional fields (private static final)
    //---------------------------------------------------------------------------
    private static final Codes DEFAULT_CAUSE = null;
    private static final int DEFAULT_EXEC_EXIT = -1;
    private static final String DEFAULT_EXEC = null;
    private static final ExtractLog DEFAULT_EXTRACTLOG = null;
    private static final int DEFAULT_AP_FIXINFO = -1;
    private static final int DEFAULT_MODEM_FIXINFO = -1;
    private static final int DEFAULT_MCWILL_FIXINFO = -1;
    private static final int DEFAULT_WLAN_FIXINFO = -1;
    private static final int DEFAULT_ACC_FIXINFO = -1;
    private static final int DEFAULT_GPS_FIXINFO = -1;

    //---------------------------------------------------------------------------
    // Constructed Function
    //---------------------------------------------------------------------------
    // <> is *required*
    public ServerReq() {
        this(DEFAULT_CAUSE, DEFAULT_EXEC_EXIT, DEFAULT_EXEC, DEFAULT_EXTRACTLOG, DEFAULT_AP_FIXINFO, DEFAULT_MODEM_FIXINFO, DEFAULT_MCWILL_FIXINFO, DEFAULT_WLAN_FIXINFO, DEFAULT_ACC_FIXINFO, DEFAULT_GPS_FIXINFO);
    }

    public ServerReq(Codes cause, int exec_exit, String exec, ExtractLog extractLog, int ap_fixinfo, int modem_fixinfo, int mcwill_fixinfo, int wlan_fixinfo, int acc_fixinfo, int gps_fixinfo) {
        this.cause = cause;
        this.exec_exit = exec_exit;
        this.exec = exec;
        this.extractLog = extractLog;
        this.ap_fixinfo = ap_fixinfo;
        this.modem_fixinfo = modem_fixinfo;
        this.mcwill_fixinfo = mcwill_fixinfo;
        this.wlan_fixinfo = wlan_fixinfo;
        this.acc_fixinfo = acc_fixinfo;
        this.gps_fixinfo = gps_fixinfo;
    }
    public ServerReq(log4droid.ServerRequest assReq){
        this.cause = new Codes(assReq.getCause());
        this.exec_exit = assReq.getExecExit();
        this.exec = assReq.getExec();
        this.extractLog = new ExtractLog(assReq.getExtractLog());
        this.ap_fixinfo = assReq.getApFixinfo();
        this.modem_fixinfo = assReq.getModemFixinfo();
        this.mcwill_fixinfo = assReq.getMcwillFixinfo();
        this.wlan_fixinfo = assReq.getWlanFixinfo();
        this.acc_fixinfo = assReq.getAccFixinfo();
        this.gps_fixinfo = assReq.getGpsFixinfo();


    }
    public log4droid.ServerRequest.Builder toBuilder() {
        log4droid.ServerRequest.Builder builder = log4droid.ServerRequest.newBuilder();
        if (hasCause()){
            builder.setCause(this.cause.toBuilder());
        }
        if (hasExecExit()){
            builder.setExecExit(this.exec_exit);
        }
        if (hasExec()){
            builder.setExec(this.exec);
        }
        if (hasExtractLog()){
            builder.setExtractLog(this.extractLog.toBuilder());
        }
        if (hasApFixinfo()){
            builder.setApFixinfo(this.ap_fixinfo);
        }
        if (hasModemFixinfo()){
            builder.setModemFixinfo(this.modem_fixinfo);
        }
        if (hasMcwillFixinfo()){
            builder.setMcwillFixinfo(this.mcwill_fixinfo);
        }
        if(hasWlanFixinfo()){
            builder.setWlanFixinfo(this.wlan_fixinfo);
        }
        if (hasAccFixinfo()){
            builder.setAccFixinfo(this.acc_fixinfo);
        }
        if (hasGpsFixinfo()){
            builder.setGpsFixinfo(this.gps_fixinfo);
        }
        return builder;
    }
    //---------------------------------------------------------------------------
    // getter Functions
    //---------------------------------------------------------------------------
    //required fields

    //optional fields
    public boolean hasCause() {
        return (this.cause != DEFAULT_CAUSE);
    }
    public Codes getCause() {
        return this.cause;
    }
    public void setCause(Codes cause){
        this.cause = cause;
    }
    public boolean hasExecExit() {
        return (this.exec_exit != DEFAULT_EXEC_EXIT);
    }
    public int getExecExit() {
        return this.exec_exit;
    }
    public void setExecExit(int exec_exit){
        this.exec_exit = exec_exit;
    }
    public boolean hasExec() {
        return (this.exec != DEFAULT_EXEC);
    }
    public String getExec() {
        return this.exec;
    }
    public void setExec(String exec){
        this.exec = exec;
    }
    public boolean hasExtractLog() {
        return (this.extractLog != DEFAULT_EXTRACTLOG);
    }
    public ExtractLog getExtractLog() {
        return this.extractLog;
    }
    public void setExtractLog(ExtractLog extractLog){
        this.extractLog = extractLog;
    }
    public boolean hasApFixinfo() {
        return (this.ap_fixinfo != DEFAULT_AP_FIXINFO);
    }
    public int getApFixinfo() {
        return this.ap_fixinfo;
    }
    public void setApFixinfo(int ap_fixinfo){
        this.ap_fixinfo = ap_fixinfo;
    }
    public boolean hasModemFixinfo() {
        return (this.modem_fixinfo != DEFAULT_MODEM_FIXINFO);
    }
    public int getModemFixinfo() {
        return this.modem_fixinfo;
    }
    public void setModemFixinfo(int modem_fixinfo){
        this.modem_fixinfo = modem_fixinfo;
    }
    public boolean hasMcwillFixinfo() {
        return (this.mcwill_fixinfo != DEFAULT_MCWILL_FIXINFO);
    }
    public int getMcwillFixinfo() {
        return this.mcwill_fixinfo;
    }
    public void setMcwillFixinfo(int mcwill_fixinfo){
        this.mcwill_fixinfo = mcwill_fixinfo;
    }
    public boolean hasWlanFixinfo() {
        return (this.wlan_fixinfo != DEFAULT_WLAN_FIXINFO);
    }
    public int getWlanFixinfo() {
        return this.wlan_fixinfo;
    }
    public void setWlanFixinfo(int wlan_fixinfo){
        this.wlan_fixinfo = wlan_fixinfo;
    }
    public boolean hasAccFixinfo() {
        return (this.acc_fixinfo != DEFAULT_ACC_FIXINFO);
    }
    public int getAccFixinfo() {
        return this.acc_fixinfo;
    }
    public void setAccFixinfo(int acc_fixinfo){
        this.acc_fixinfo = acc_fixinfo;
    }
    public boolean hasGpsFixinfo() {
        return (this.gps_fixinfo != DEFAULT_GPS_FIXINFO);
    }
    public int getGpsFixinfo() {
        return this.gps_fixinfo;
    }
    public void setGpsFixinfo(int gps_fixinfo){
        this.gps_fixinfo = gps_fixinfo;
    }

    //---------------------------------------------------------------------------
    // decode Function
    //---------------------------------------------------------------------------
    public static ServerReq parseFrom(byte[] bytes) throws InvalidProtocolBufferException {
        log4droid.ServerRequest _request = log4droid.ServerRequest.parseFrom(bytes);

        //required fields

        //decode
        ServerReq _req = new ServerReq();

        //optional fields
        if (_request.hasCause()) {
            _req.cause = new Codes(_request.getCause());
        }
        if (_request.hasExecExit()) {
            _req.exec_exit = _request.getExecExit();
        }
        if (_request.hasExec()) {
            _req.exec = _request.getExec();
        }
        if (_request.hasExtractLog()) {
            _req.extractLog = new ExtractLog(_request.getExtractLog());
        }
        if (_request.hasApFixinfo()) {
            _req.ap_fixinfo = _request.getApFixinfo();
        }
        if (_request.hasModemFixinfo()) {
            _req.modem_fixinfo = _request.getModemFixinfo();
        }
        if (_request.hasMcwillFixinfo()) {
            _req.mcwill_fixinfo = _request.getMcwillFixinfo();
        }
        if (_request.hasWlanFixinfo()) {
            _req.wlan_fixinfo = _request.getWlanFixinfo();
        }
        if (_request.hasAccFixinfo()) {
            _req.acc_fixinfo = _request.getAccFixinfo();
        }
        if (_request.hasGpsFixinfo()) {
            _req.gps_fixinfo = _request.getGpsFixinfo();
        }

        //return
        return _req;
    }

    //---------------------------------------------------------------------------
    // encode Function
    //---------------------------------------------------------------------------
    @Override
    public int toBytes(ByteBuf buf) {
        log4droid.ServerRequest.Builder builder = log4droid.ServerRequest.newBuilder();

        //required fields

        //optional fields
        if (hasCause()) {
            builder.setCause(cause.toBuilder());
        }
        if (hasExecExit()) {
            builder.setExecExit(exec_exit);
        }
        if (hasExec()) {
            builder.setExec(exec);
        }
        if (hasExtractLog()) {
            builder.setExtractLog(extractLog.toBuilder());
        }
        if (hasApFixinfo()) {
            builder.setApFixinfo(ap_fixinfo);
        }
        if (hasModemFixinfo()) {
            builder.setModemFixinfo(modem_fixinfo);
        }
        if (hasMcwillFixinfo()) {
            builder.setMcwillFixinfo(mcwill_fixinfo);
        }
        if (hasWlanFixinfo()) {
            builder.setWlanFixinfo(wlan_fixinfo);
        }
        if (hasAccFixinfo()) {
            builder.setAccFixinfo(acc_fixinfo);
        }
        if (hasGpsFixinfo()) {
            builder.setGpsFixinfo(gps_fixinfo);
        }

        //encode
        byte[] bytes = builder.build().toByteArray();
        buf.writeBytes(bytes);

        //return
        return bytes.length;
    }

    //---------------------------------------------------------------------------
    // toString Function
    //---------------------------------------------------------------------------
    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();

        sb.append("ServerReq { ");

        //required fields

        //optional fields
        if (hasCause()) {
            sb.append("cause:").append(cause).append(",");
        }
        if (hasExecExit()) {
            sb.append("exec_exit:").append(exec_exit).append(",");
        }
        if (hasExec()) {
            sb.append("exec:").append(exec).append(",");
        }
        if (hasExtractLog()) {
            sb.append("extractLog:").append(extractLog).append(",");
        }
        if (hasApFixinfo()) {
            sb.append("ap_fixinfo:").append(ap_fixinfo).append(",");
        }
        if (hasModemFixinfo()) {
            sb.append("modem_fixinfo:").append(modem_fixinfo).append(",");
        }
        if (hasMcwillFixinfo()) {
            sb.append("mcwill_fixinfo:").append(mcwill_fixinfo).append(",");
        }
        if (hasWlanFixinfo()) {
            sb.append("wlan_fixinfo:").append(wlan_fixinfo).append(",");
        }
        if (hasAccFixinfo()) {
            sb.append("acc_fixinfo:").append(acc_fixinfo).append(",");
        }
        if (hasGpsFixinfo()) {
            sb.append("gps_fixinfo:").append(gps_fixinfo).append(",");
        }

        //remove last ','
        sb.setLength(sb.length() - 1);

        sb.append(" }");

        return sb.toString();
    }
}

