package com.ctf.log4droid.mt_body;

import java.io.*;
import com.google.protobuf.ByteString;
import com.ctf.ass_public.utils.ConvUtils;
import com.ctf.log4droid.protobuf.log4droid;
import com.google.protobuf.ByteString;
import java.util.ArrayList;
import com.ctf.log4droid.protobuf.log4droid.GRADE;
import com.ctf.log4droid.protobuf.log4droid.LEVEL;
import com.ctf.log4droid.protobuf.log4droid.TRANSPORT;
import com.ctf.log4droid.protobuf.log4droid.NETWORK_TYPE;
import com.ctf.log4droid.protobuf.log4droid.RSQ;
import com.google.protobuf.InvalidProtocolBufferException;
import io.netty.buffer.ByteBuf;

/*
 * This file is auto generated by *proto_convert*
 *  and should *NOT* be modified manually!!!
 */
public class Server2Term  implements Serializable{
    //---------------------------------------------------------------------------
    // ALL fields (private)
    //---------------------------------------------------------------------------
    //required fields

    //optional fields
    private int pkg_uid;
    private int pkg_retry;
    private int utc_second;
    private byte[] signature;
    private ServerRsp serverResponse;
    private ServerReq serverRequest;
    private PassThrough passThrough;
    private String exception;
    private byte[] sid;

    //---------------------------------------------------------------------------
    // DEFAULT value for optional fields (private static final)
    //---------------------------------------------------------------------------
    private static final int DEFAULT_PKG_UID = -1;
    private static final int DEFAULT_PKG_RETRY = -1;
    private static final int DEFAULT_UTC_SECOND = -1;
    private static final byte[] DEFAULT_SIGNATURE = null;
    private static final ServerRsp DEFAULT_SERVERRESPONSE = null;
    private static final ServerReq DEFAULT_SERVERREQUEST = null;
    private static final PassThrough DEFAULT_PASSTHROUGH = null;
    private static final String DEFAULT_EXCEPTION = null;
    private static final byte[] DEFAULT_SID = null;

    //---------------------------------------------------------------------------
    // Constructed Function
    //---------------------------------------------------------------------------
    // <> is *required*
    public Server2Term() {
        this(DEFAULT_PKG_UID, DEFAULT_PKG_RETRY, DEFAULT_UTC_SECOND, DEFAULT_SIGNATURE, DEFAULT_SERVERRESPONSE, DEFAULT_SERVERREQUEST, DEFAULT_PASSTHROUGH, DEFAULT_EXCEPTION, DEFAULT_SID);
    }

    public Server2Term(int pkg_uid, int pkg_retry, int utc_second, byte[] signature, ServerRsp serverResponse, ServerReq serverRequest, PassThrough passThrough, String exception, byte[] sid) {
        this.pkg_uid = pkg_uid;
        this.pkg_retry = pkg_retry;
        this.utc_second = utc_second;
        this.signature = signature;
        this.serverResponse = serverResponse;
        this.serverRequest = serverRequest;
        this.passThrough = passThrough;
        this.exception = exception;
        this.sid = sid;
    }

    //---------------------------------------------------------------------------
    // decode Constructed Function
    //---------------------------------------------------------------------------

    public static Server2Term parseFrom(byte[] bytes) throws InvalidProtocolBufferException {
        log4droid.Server2Term server2Term = log4droid.Server2Term.parseFrom(bytes);

        int pkg_uid = server2Term.getPkgUid();
        int pkg_retry = server2Term.getPkgRetry();
        int utc_second = server2Term.getUtcSecond();
        byte[] signature = server2Term.getSignature().toByteArray();
        ServerRsp serverResponse = new ServerRsp(server2Term.getServerResponse());
        ServerReq serverRequest = new ServerReq(server2Term.getServerRequest());
        PassThrough passThrough = new PassThrough(server2Term.getPassThrough());
        String exception = server2Term.getException();
        byte[] sid = server2Term.getSid().toByteArray();

        Server2Term _ret = new Server2Term(pkg_uid,pkg_retry,utc_second,signature,serverResponse,serverRequest,passThrough,exception,sid);
        return _ret;
    }

    public Server2Term(log4droid.Server2Term erver2Term) {
        //decode with required fields
        this();
        //---------------------------
        //optional fields
        if (erver2Term.hasPkgUid()) {
            this.pkg_uid = erver2Term.getPkgUid();
        }
        if (erver2Term.hasPkgRetry()) {
            this.pkg_retry = erver2Term.getPkgRetry();
        }
        if (erver2Term.hasUtcSecond()) {
            this.utc_second = erver2Term.getUtcSecond();
        }
        if (erver2Term.hasSignature()) {
            this.signature = erver2Term.getSignature().toByteArray();
        }
        if (erver2Term.hasServerResponse()) {
            this.serverResponse = new ServerRsp(erver2Term.getServerResponse());
        }
        if (erver2Term.hasServerRequest()) {
            this.serverRequest = new ServerReq(erver2Term.getServerRequest());
        }
        if (erver2Term.hasPassThrough()) {
            this.passThrough = new PassThrough(erver2Term.getPassThrough());
        }
        if (erver2Term.hasException()) {
            this.exception = erver2Term.getException();
        }
        if (erver2Term.hasSid()) {
            this.sid = erver2Term.getSid().toByteArray();
        }
    }

    //---------------------------------------------------------------------------
    // getter Functions
    //---------------------------------------------------------------------------
    //required fields

    //optional fields
    public boolean hasPkgUid() {
        return (this.pkg_uid != DEFAULT_PKG_UID);
    }
    public int getPkgUid() {
        return this.pkg_uid;
    }
    public boolean hasPkgRetry() {
        return (this.pkg_retry != DEFAULT_PKG_RETRY);
    }
    public int getPkgRetry() {
        return this.pkg_retry;
    }
    public boolean hasUtcSecond() {
        return (this.utc_second != DEFAULT_UTC_SECOND);
    }
    public int getUtcSecond() {
        return this.utc_second;
    }
    public boolean hasSignature() {
        return (this.signature != DEFAULT_SIGNATURE);
    }
    public byte[] getSignature() {
        return this.signature;
    }
    public boolean hasServerResponse() {
        return (this.serverResponse != DEFAULT_SERVERRESPONSE);
    }
    public ServerRsp getServerResponse() {
        return this.serverResponse;
    }
    public boolean hasServerRequest() {
        return (this.serverRequest != DEFAULT_SERVERREQUEST);
    }
    public ServerReq getServerRequest() {
        return this.serverRequest;
    }
    public boolean hasPassThrough() {
        return (this.passThrough != DEFAULT_PASSTHROUGH);
    }
    public PassThrough getPassThrough() {
        return this.passThrough;
    }
    public boolean hasException() {
        return (this.exception != DEFAULT_EXCEPTION);
    }
    public String getException() {
        return this.exception;
    }
    public boolean hasSid() {
        return (this.sid != DEFAULT_SID);
    }
    public byte[] getSid() {
        return this.sid;
    }

    //---------------------------------------------------------------------------
    // setter Functions
    //---------------------------------------------------------------------------
    public void setPkgUid(int pkg_uid){
        this.pkg_uid = pkg_uid;
    }
    public void setPkgRetry(int pkg_retry){
        this.pkg_retry = pkg_retry;
    }
    public void setUtcSecond(int utc_second){
        this.utc_second = utc_second;
    }
    public void setSignature(byte[] signature){
        this.signature = signature;
    }
    public void setServerResponse(ServerRsp serverResponse){
        this.serverResponse = serverResponse;
    }
    public void setServerRequest(ServerReq serverRequest){
        this.serverRequest = serverRequest;
    }
    public void setPassThrough(PassThrough passThrough){
        this.passThrough = passThrough;
    }
    public void setException(String exception){
        this.exception = exception;
    }
    public void setSid(byte[] sid){
        this.sid = sid;
    }
   //--------------------------------------
   // encode (Java obj => Proto builder)
   //--------------------------------------
    public log4droid.Server2Term.Builder toBuilder() {
        log4droid.Server2Term.Builder builder = log4droid.Server2Term.newBuilder();

        //required fields

        //optional fields
        if (hasPkgUid()) {
            builder.setPkgUid(pkg_uid);
        }
        if (hasPkgRetry()) {
            builder.setPkgRetry(pkg_retry);
        }
        if (hasUtcSecond()) {
            builder.setUtcSecond(utc_second);
        }
        if (hasSignature()) {
            builder.setSignature(ByteString.copyFrom(signature));
        }
        if (hasServerResponse()) {
            builder.setServerResponse(serverResponse.toBuilder());
        }
        if (hasServerRequest()) {
            builder.setServerRequest(serverRequest.toBuilder());
        }
        if (hasPassThrough()) {
            builder.setPassThrough(passThrough.toBuilder());
        }
        if (hasException()) {
            builder.setException(exception);
        }
        if (hasSid()) {
            builder.setSid(ByteString.copyFrom(sid));
        }

        //return
        return builder;
    }

    public int toBytes(ByteBuf buf) {
        log4droid.Server2Term.Builder builder = log4droid.Server2Term.newBuilder();

        //required fields

        //optional fields
        if (hasPkgUid()) {
            builder.setPkgUid(pkg_uid);
        }
        if (hasPkgRetry()) {
            builder.setPkgRetry(pkg_retry);
        }
        if (hasUtcSecond()) {
            builder.setUtcSecond(utc_second);
        }
        if (hasSignature()) {
            builder.setSignature(ByteString.copyFrom(signature));
        }
        if (hasServerResponse()) {
            builder.setServerResponse(serverResponse.toBuilder());
        }
        if (hasServerRequest()) {
            builder.setServerRequest(serverRequest.toBuilder());
        }
        if (hasPassThrough()) {
            builder.setPassThrough(passThrough.toBuilder());
        }
        if (hasException()) {
            builder.setException(exception);
        }
        if (hasSid()) {
            builder.setSid(ByteString.copyFrom(sid));
        }

        byte[] bytes = builder.build().toByteArray();
        buf.writeBytes(bytes);
        return bytes.length;
    }
    //---------------------------------------------------------------------------
    // toString Function
    //---------------------------------------------------------------------------
    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();

        sb.append("Server2Term { ");

        //required fields

        //optional fields
        if (hasPkgUid()) {
            sb.append("pkg_uid:").append(pkg_uid).append(",");
        }
        if (hasPkgRetry()) {
            sb.append("pkg_retry:").append(pkg_retry).append(",");
        }
        if (hasUtcSecond()) {
            sb.append("utc_second:").append(utc_second).append(",");
        }
        if (hasSignature()) {
            sb.append("signature:").append(ConvUtils.bytesToHexStr(signature)).append(",");
        }
        if (hasServerResponse()) {
            sb.append("serverResponse:").append(serverResponse).append(",");
        }
        if (hasServerRequest()) {
            sb.append("serverRequest:").append(serverRequest).append(",");
        }
        if (hasPassThrough()) {
            sb.append("passThrough:").append(passThrough).append(",");
        }
        if (hasException()) {
            sb.append("exception:").append(exception).append(",");
        }
        if (hasSid()) {
            sb.append("sid:").append(ConvUtils.bytesToHexStr(sid)).append(",");
        }

        //remove last ','
        sb.setLength(sb.length() - 1);

        sb.append(" }");

        return sb.toString();
    }
}

