package com.ctf.log4droid.mt_body;

import java.io.*;
import com.google.protobuf.ByteString;
import com.ctf.ass_public.utils.ConvUtils;
import com.ctf.log4droid.protobuf.log4droid;
import com.google.protobuf.ByteString;
import java.util.ArrayList;
import com.ctf.log4droid.protobuf.log4droid.GRADE;
import com.ctf.log4droid.protobuf.log4droid.LEVEL;
import com.ctf.log4droid.protobuf.log4droid.TRANSPORT;
import com.ctf.log4droid.protobuf.log4droid.NETWORK_TYPE;
import com.ctf.log4droid.protobuf.log4droid.RSQ;
import com.google.protobuf.InvalidProtocolBufferException;
import io.netty.buffer.ByteBuf;

/*
 * This file is auto generated by *proto_convert*
 *  and should *NOT* be modified manually!!!
 */
public class Modem  implements Serializable{
    //---------------------------------------------------------------------------
    // ALL fields (private)
    //---------------------------------------------------------------------------
    //required fields

    //optional fields
    private byte[] imei;
    private Sim sim;
    private ArrayList<Cell> cell_search;
    private String version;

    //---------------------------------------------------------------------------
    // DEFAULT value for optional fields (private static final)
    //---------------------------------------------------------------------------
    private static final byte[] DEFAULT_IMEI = null;
    private static final Sim DEFAULT_SIM = null;
    private static final ArrayList<Cell> DEFAULT_CELL_SEARCH = null;
    private static final String DEFAULT_VERSION = null;

    //---------------------------------------------------------------------------
    // Constructed Function
    //---------------------------------------------------------------------------
    // <> is *required*
    public Modem() {
        this(DEFAULT_IMEI, DEFAULT_SIM, DEFAULT_CELL_SEARCH, DEFAULT_VERSION);
    }

    public Modem(byte[] imei, Sim sim, ArrayList<Cell> cell_search, String version) {
        this.imei = imei;
        this.sim = sim;
        this.cell_search = cell_search;
        this.version = version;
    }

    //---------------------------------------------------------------------------
    // decode Constructed Function
    //---------------------------------------------------------------------------
    private static ArrayList<Cell> getCellSearch(log4droid._modem modem) {
        ArrayList<Cell> cell_search = new ArrayList<Cell>();
            for (log4droid._cell cell : modem.getCellSearchList()) {
                cell_search.add(new Cell(cell));
            }
        return cell_search;
    }


    public static Modem parseFrom(byte[] bytes) throws InvalidProtocolBufferException {
        log4droid._modem modem = log4droid._modem.parseFrom(bytes);


        byte[] imei = modem.getImei().toByteArray();
        Sim sim = new Sim(modem.getSim());
        ArrayList<Cell> cell_search = getCellSearch(modem);
        String version = modem.getVersion();

        Modem _ret = new Modem(imei,sim,cell_search,version);
        return _ret;
    }

    public Modem(log4droid._modem modem) {
        //decode with required fields
        this();
        //---------------------------
        //optional fields
        if (modem.hasImei()) {
            this.imei = modem.getImei().toByteArray();
        }
        if (modem.hasSim()) {
            this.sim = new Sim(modem.getSim());
        }
        this.cell_search = getCellSearch(modem);
        if (modem.hasVersion()) {
            this.version = modem.getVersion();
        }
    }

    //---------------------------------------------------------------------------
    // getter Functions
    //---------------------------------------------------------------------------
    //required fields

    //optional fields
    public boolean hasImei() {
        return (this.imei != DEFAULT_IMEI);
    }
    public byte[] getImei() {
        return this.imei;
    }
    public boolean hasSim() {
        return (this.sim != DEFAULT_SIM);
    }
    public Sim getSim() {
        return this.sim;
    }
    public boolean hasCellSearch() {
        return (this.cell_search != DEFAULT_CELL_SEARCH);
    }
    public ArrayList<Cell> getCellSearch() {
        return this.cell_search;
    }
    public boolean hasVersion() {
        return (this.version != DEFAULT_VERSION);
    }
    public String getVersion() {
        return this.version;
    }

    //---------------------------------------------------------------------------
    // setter Functions
    //---------------------------------------------------------------------------
    public void setImei(byte[] imei){
        this.imei = imei;
    }
    public void setSim(Sim sim){
        this.sim = sim;
    }
    public void setCellSearch(ArrayList<Cell> cell_search){
        this.cell_search = cell_search;
    }
    public void setVersion(String version){
        this.version = version;
    }
   //--------------------------------------
   // encode (Java obj => Proto builder)
   //--------------------------------------
    public int toBytes(ByteBuf buf) {
        log4droid._modem.Builder builder = log4droid._modem.newBuilder();

        //required fields

        //optional fields
        if (hasImei()) {
            builder.setImei(ByteString.copyFrom(imei));
        }
        if (hasSim()) {
            builder.setSim(sim.toBuilder());
        }
        if (hasCellSearch()) {
            for (int i=0; i<cell_search.size(); i++) {
                builder.addCellSearch(cell_search.get(i).toBuilder());
            }
        }
        if (hasVersion()) {
            builder.setVersion(version);
        }

        byte[] bytes = builder.build().toByteArray();
        buf.writeBytes(bytes);
        return bytes.length;
    }
    public log4droid._modem.Builder toBuilder() {
        log4droid._modem.Builder builder = log4droid._modem.newBuilder();

        //required fields

        //optional fields
        if (hasImei()) {
            builder.setImei(ByteString.copyFrom(imei));
        }
        if (hasSim()) {
            builder.setSim(sim.toBuilder());
        }
        if (hasCellSearch()) {
            for (int i=0; i<cell_search.size(); i++) {
                builder.addCellSearch(cell_search.get(i).toBuilder());
            }
        }
        if (hasVersion()) {
            builder.setVersion(version);
        }

        //return
        return builder;
    }
    //---------------------------------------------------------------------------
    // toString Function
    //---------------------------------------------------------------------------
    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();

        sb.append("Modem { ");

        //required fields

        //optional fields
        if (hasImei()) {
            sb.append("imei:").append(ConvUtils.bcd2str(imei)).append(",");
        }
        if (hasSim()) {
            sb.append("sim:").append(sim).append(",");
        }
        if (hasCellSearch()) {
            sb.append("cell_search:").append(cell_search).append(",");
        }
        if (hasVersion()) {
            sb.append("version:").append(version).append(",");
        }

        //remove last ','
        sb.setLength(sb.length() - 1);

        sb.append(" }");

        return sb.toString();
    }
}

