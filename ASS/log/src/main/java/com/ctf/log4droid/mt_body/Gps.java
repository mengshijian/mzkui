package com.ctf.log4droid.mt_body;

import com.ctf.log4droid.protobuf.log4droid;
import com.google.protobuf.InvalidProtocolBufferException;
import io.netty.buffer.ByteBuf;

import java.io.Serializable;

/*
 * This file is auto generated by *proto_convert*
 *  and should *NOT* be modified manually!!!
 */
public class Gps implements Serializable {
    //---------------------------------------------------------------------------
    // ALL fields (private)
    //---------------------------------------------------------------------------
    //required fields

    //optional fields
    private float latitude;
    private float longitude;
    private int status;
    private int second;
    private float altitude;
    private float speed;
    private String version;

    //---------------------------------------------------------------------------
    // DEFAULT value for optional fields (private static final)
    //---------------------------------------------------------------------------
    private static final float DEFAULT_LATITUDE = -1.0f;
    private static final float DEFAULT_LONGITUDE = -1.0f;
    private static final int DEFAULT_STATUS = -1;
    private static final int DEFAULT_SECOND = -1;
    private static final float DEFAULT_ALTITUDE = -1.0f;
    private static final float DEFAULT_SPEED = -1.0f;
    private static final String DEFAULT_VERSION = null;

    //---------------------------------------------------------------------------
    // Constructed Function
    //---------------------------------------------------------------------------
    // <> is *required*
    public Gps() {
        this(DEFAULT_LATITUDE, DEFAULT_LONGITUDE, DEFAULT_STATUS, DEFAULT_SECOND, DEFAULT_ALTITUDE, DEFAULT_SPEED, DEFAULT_VERSION);
    }

    public Gps(float latitude, float longitude, int status, int second, float altitude, float speed, String version) {

        this.latitude = latitude;
        this.longitude = longitude;
        this.status = status;
        this.second = second;
        this.altitude = altitude;
        this.speed = speed;
        this.version = version;
    }

    //---------------------------------------------------------------------------
    // decode Constructed Function
    //---------------------------------------------------------------------------

    public static Gps parseFrom(byte[] bytes) throws InvalidProtocolBufferException {
        log4droid._gps gps = log4droid._gps.parseFrom(bytes);

        float latitude = gps.getLatitude();
        float longitude = gps.getLongitude();
        int status = gps.getStatus();
        int second = gps.getSecond();
        float altitude = gps.getAltitude();
        float speed = gps.getSpeed();
        String version = gps.getVersion();

        Gps _ret = new Gps(latitude, longitude, status, second, altitude, speed, version);
        return _ret;
    }

    public Gps(log4droid._gps gps) {
        //decode with required fields
        this();
        //---------------------------
        //optional fields
        if (gps.hasLatitude()) {
            this.latitude = gps.getLatitude();
        }
        if (gps.hasLongitude()) {
            this.longitude = gps.getLongitude();
        }
        if (gps.hasStatus()) {
            this.status = gps.getStatus();
        }
        if (gps.hasSecond()) {
            this.second = gps.getSecond();
        }
        if (gps.hasAltitude()) {
            this.altitude = gps.getAltitude();
        }
        if (gps.hasSpeed()) {
            this.speed = gps.getSpeed();
        }
        if (gps.hasVersion()) {
            this.version = gps.getVersion();
        }
    }

    //---------------------------------------------------------------------------
    // getter Functions
    //---------------------------------------------------------------------------
    //required fields

    //optional fields
    public boolean hasLatitude() {
        return (this.latitude != DEFAULT_LATITUDE);
    }

    public float getLatitude() {
        return this.latitude;
    }

    public boolean hasLongitude() {
        return (this.longitude != DEFAULT_LONGITUDE);
    }

    public float getLongitude() {
        return this.longitude;
    }

    public boolean hasStatus() {
        return (this.status != DEFAULT_STATUS);
    }

    public int getStatus() {
        return this.status;
    }

    public boolean hasSecond() {
        return (this.second != DEFAULT_SECOND);
    }

    public int getSecond() {
        return this.second;
    }

    public boolean hasAltitude() {
        return (this.altitude != DEFAULT_ALTITUDE);
    }

    public float getAltitude() {
        return this.altitude;
    }

    public boolean hasSpeed() {
        return (this.speed != DEFAULT_SPEED);
    }

    public float getSpeed() {
        return this.speed;
    }

    public boolean hasVersion() {
        return (this.version != DEFAULT_VERSION);
    }

    public String getVersion() {
        return this.version;
    }

    //---------------------------------------------------------------------------
    // setter Functions
    //---------------------------------------------------------------------------
    public void setLatitude(float latitude) {
        this.latitude = latitude;
    }

    public void setLongitude(float longitude) {
        this.longitude = longitude;
    }

    public void setStatus(int status) {
        this.status = status;
    }

    public void setSecond(int second) {
        this.second = second;
    }

    public void setAltitude(float altitude) {
        this.altitude = altitude;
    }

    public void setSpeed(float speed) {
        this.speed = speed;
    }

    public void setVersion(String version) {
        this.version = version;
    }

    //--------------------------------------
    // encode (Java obj => Proto builder)
    //--------------------------------------
    public int toBytes(ByteBuf buf) {
        log4droid._gps.Builder builder = log4droid._gps.newBuilder();

        //required fields

        //optional fields
        builder.setLatitude(latitude);
        builder.setLongitude(longitude);
        builder.setStatus(status);
        builder.setSecond(second);
        builder.setAltitude(altitude);
        builder.setSpeed(speed);
        builder.setVersion(version);

        byte[] bytes = builder.build().toByteArray();
        buf.writeBytes(bytes);
        return bytes.length;
    }
    public log4droid._gps.Builder toBuilder() {
        log4droid._gps.Builder builder = log4droid._gps.newBuilder();

        //required fields

        //optional fields
        if (hasLatitude()) {
            builder.setLatitude(latitude);
        }
        if (hasLongitude()) {
            builder.setLongitude(longitude);
        }
        if (hasStatus()) {
            builder.setStatus(status);
        }
        if (hasSecond()) {
            builder.setSecond(second);
        }
        if (hasAltitude()) {
            builder.setAltitude(altitude);
        }
        if (hasSpeed()) {
            builder.setSpeed(speed);
        }
        if (hasVersion()) {
            builder.setVersion(version);
        }

        //return
        return builder;
    }

    //---------------------------------------------------------------------------
    // toString Function
    //---------------------------------------------------------------------------
    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();

        sb.append("Gps { ");

        //required fields

        //optional fields
        if (hasLatitude()) {
            sb.append("latitude:").append(latitude).append(",");
        }
        if (hasLongitude()) {
            sb.append("longitude:").append(longitude).append(",");
        }
        if (hasStatus()) {
            sb.append("status:").append(status).append(",");
        }
        if (hasSecond()) {
            sb.append("second:").append(second).append(",");
        }
        if (hasAltitude()) {
            sb.append("altitude:").append(altitude).append(",");
        }
        if (hasSpeed()) {
            sb.append("speed:").append(speed).append(",");
        }
        if (hasVersion()) {
            sb.append("version:").append(version).append(",");
        }

        //remove last ','
        sb.setLength(sb.length() - 1);

        sb.append(" }");

        return sb.toString();
    }
}

