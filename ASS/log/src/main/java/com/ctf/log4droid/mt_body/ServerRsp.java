package com.ctf.log4droid.mt_body;

import java.util.ArrayList;
import com.google.protobuf.ByteString;
import com.ctf.ass_public.utils.ConvUtils;
import com.ctf.log4droid.protobuf.log4droid;
import com.ctf.ass_codec.struct.MessageBody;
import com.google.protobuf.InvalidProtocolBufferException;
import io.netty.buffer.ByteBuf;
import com.ctf.log4droid.protobuf.log4droid.GRADE;
import com.ctf.log4droid.protobuf.log4droid.LEVEL;
import com.ctf.log4droid.protobuf.log4droid.TRANSPORT;
import com.ctf.log4droid.protobuf.log4droid.NETWORK_TYPE;
import com.ctf.log4droid.protobuf.log4droid.RSQ;

/*
 * This file is auto generated by *proto_convert*
 *  and should *NOT* be modified manually!!!
 */
public class ServerRsp extends MessageBody {
    //---------------------------------------------------------------------------
    // ALL fields (private)
    //---------------------------------------------------------------------------
    //required fields

    //optional fields
    private Codes login;
    private Codes alert;
    private Codes uploadLog;
    private byte[] sessionId;
    private LogConfig logConfig;
    private PkgConfig pkgConfig;

    //---------------------------------------------------------------------------
    // DEFAULT value for optional fields (private static final)
    //---------------------------------------------------------------------------
    private static final Codes DEFAULT_LOGIN = null;
    private static final Codes DEFAULT_ALERT = null;
    private static final Codes DEFAULT_UPLOADLOG = null;
    private static final byte[] DEFAULT_SESSIONID = null;
    private static final LogConfig DEFAULT_LOGCONFIG = null;
    private static final PkgConfig DEFAULT_PKGCONFIG = null;

    //---------------------------------------------------------------------------
    // Constructed Function
    //---------------------------------------------------------------------------
    // <> is *required*
    public ServerRsp() {
        this(DEFAULT_LOGIN, DEFAULT_ALERT, DEFAULT_UPLOADLOG, DEFAULT_SESSIONID, DEFAULT_LOGCONFIG, DEFAULT_PKGCONFIG);
    }

    public ServerRsp(Codes login, Codes alert, Codes uploadLog, byte[] sessionId, LogConfig logConfig, PkgConfig pkgConfig) {
        this.login = login;
        this.alert = alert;
        this.uploadLog = uploadLog;
        this.sessionId = sessionId;
        this.logConfig = logConfig;
        this.pkgConfig = pkgConfig;
    }
    public ServerRsp(log4droid.ServerResponse assRsp){
        this.login = new Codes(assRsp.getLogin());
        this.alert = new Codes(assRsp.getAlert());
        this.uploadLog = new Codes(assRsp.getUploadLog());
        this.sessionId = assRsp.getSessionId().toByteArray();
        this.logConfig = new LogConfig(assRsp.getLogConfig());
        this.pkgConfig = new PkgConfig(assRsp.getPkgConfig());

    }

    public log4droid.ServerResponse.Builder toBuilder(){
        log4droid.ServerResponse.Builder builder = log4droid.ServerResponse.newBuilder();
        if (hasLogin()){
            builder.setLogin(this.login.toBuilder());
        }
        if (hasAlert()){
            builder.setAlert(this.alert.toBuilder());
        }
        if (hasUploadLog()){
            builder.setLogin(this.uploadLog.toBuilder());
        }
        if (hasSessionId()){
            builder.setSessionId(ByteString.copyFrom(sessionId));
        }
        if (hasLogConfig()){
            builder.setLogConfig(this.logConfig.toBuilder());
        }
        if (hasPkgConfig()){
            builder.setPkgConfig(this.pkgConfig.toBuilder());
        }
        return builder;
    }
    //---------------------------------------------------------------------------
    // getter Functions
    //---------------------------------------------------------------------------
    //required fields

    //optional fields
    public boolean hasLogin() {
        return (this.login != DEFAULT_LOGIN);
    }
    public Codes getLogin() {
        return this.login;
    }
    public void setLogin(Codes login){
        this.login = login;
    }
    public boolean hasAlert() {
        return (this.alert != DEFAULT_ALERT);
    }
    public Codes getAlert() {
        return this.alert;
    }
    public void setAlert(Codes alert){
        this.alert = alert;
    }
    public boolean hasUploadLog() {
        return (this.uploadLog != DEFAULT_UPLOADLOG);
    }
    public Codes getUploadLog() {
        return this.uploadLog;
    }
    public void setUploadLog(Codes uploadLog){
        this.uploadLog = uploadLog;
    }
    public boolean hasSessionId() {
        return (this.sessionId != DEFAULT_SESSIONID);
    }
    public byte[] getSessionId() {
        return this.sessionId;
    }
    public void setSessionId(byte[] sessionId){
        this.sessionId = sessionId;
    }
    public boolean hasLogConfig() {
        return (this.logConfig != DEFAULT_LOGCONFIG);
    }
    public LogConfig getLogConfig() {
        return this.logConfig;
    }
    public void setLogConfig(LogConfig logConfig){
        this.logConfig = logConfig;
    }
    public boolean hasPkgConfig() {
        return (this.pkgConfig != DEFAULT_PKGCONFIG);
    }
    public PkgConfig getPkgConfig() {
        return this.pkgConfig;
    }
    public void setPkgConfig(PkgConfig pkgConfig){
        this.pkgConfig = pkgConfig;
    }

    //---------------------------------------------------------------------------
    // decode Function
    //---------------------------------------------------------------------------
    public static ServerRsp parseFrom(byte[] bytes) throws InvalidProtocolBufferException {
        log4droid.ServerResponse _response = log4droid.ServerResponse.parseFrom(bytes);

        //required fields

        //decode
        ServerRsp _rsp = new ServerRsp();

        //optional fields
        if (_response.hasLogin()) {
            _rsp.login = new Codes(_response.getLogin());
        }
        if (_response.hasAlert()) {
            _rsp.alert = new Codes(_response.getAlert());
        }
        if (_response.hasUploadLog()) {
            _rsp.uploadLog = new Codes(_response.getUploadLog());
        }
        if (_response.hasSessionId()) {
            _rsp.sessionId = _response.getSessionId().toByteArray();
        }
        if (_response.hasLogConfig()) {
            _rsp.logConfig = new LogConfig(_response.getLogConfig());
        }
        if (_response.hasPkgConfig()) {
            _rsp.pkgConfig = new PkgConfig(_response.getPkgConfig());
        }

        //return
        return _rsp;
    }

    //---------------------------------------------------------------------------
    // encode Function
    //---------------------------------------------------------------------------
    @Override
    public int toBytes(ByteBuf buf) {
        log4droid.ServerResponse.Builder builder = log4droid.ServerResponse.newBuilder();

        //required fields

        //optional fields
        if (hasLogin()) {
            builder.setLogin(login.toBuilder());
        }
        if (hasAlert()) {
            builder.setAlert(alert.toBuilder());
        }
        if (hasUploadLog()) {
            builder.setUploadLog(uploadLog.toBuilder());
        }
        if (hasSessionId()) {
            builder.setSessionId(ByteString.copyFrom(sessionId));
        }
        if (hasLogConfig()) {
            builder.setLogConfig(logConfig.toBuilder());
        }
        if (hasPkgConfig()) {
            builder.setPkgConfig(pkgConfig.toBuilder());
        }

        //encode
        byte[] bytes = builder.build().toByteArray();
        buf.writeBytes(bytes);

        //return
        return bytes.length;
    }

    //---------------------------------------------------------------------------
    // toString Function
    //---------------------------------------------------------------------------
    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();

        sb.append("ServerRsp { ");

        //required fields

        //optional fields
        if (hasLogin()) {
            sb.append("login:").append(login).append(",");
        }
        if (hasAlert()) {
            sb.append("alert:").append(alert).append(",");
        }
        if (hasUploadLog()) {
            sb.append("uploadLog:").append(uploadLog).append(",");
        }
        if (hasSessionId()) {
            sb.append("sessionId:").append(ConvUtils.bytesToHexStr(sessionId)).append(",");
        }
        if (hasLogConfig()) {
            sb.append("logConfig:").append(logConfig).append(",");
        }
        if (hasPkgConfig()) {
            sb.append("pkgConfig:").append(pkgConfig).append(",");
        }

        //remove last ','
        sb.setLength(sb.length() - 1);

        sb.append(" }");

        return sb.toString();
    }
}

