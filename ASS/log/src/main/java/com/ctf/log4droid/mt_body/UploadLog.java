package com.ctf.log4droid.mt_body;

import java.io.*;

import com.google.protobuf.ByteString;
import com.ctf.ass_public.utils.ConvUtils;
import com.ctf.log4droid.protobuf.log4droid;
import com.google.protobuf.ByteString;

import java.util.ArrayList;

import com.ctf.log4droid.protobuf.log4droid.GRADE;
import com.ctf.log4droid.protobuf.log4droid.LEVEL;
import com.ctf.log4droid.protobuf.log4droid.TRANSPORT;
import com.ctf.log4droid.protobuf.log4droid.NETWORK_TYPE;
import com.ctf.log4droid.protobuf.log4droid.RSQ;
import com.google.protobuf.InvalidProtocolBufferException;
import io.netty.buffer.ByteBuf;

/*
 * This file is auto generated by *proto_convert*
 *  and should *NOT* be modified manually!!!
 */
public class UploadLog implements Serializable {
    //---------------------------------------------------------------------------
    // ALL fields (private)
    //---------------------------------------------------------------------------
    //required fields

    //optional fields
    private String exception;
    private String logPath;
    private int logSize;
    private byte[] md5;

    //---------------------------------------------------------------------------
    // DEFAULT value for optional fields (private static final)
    //---------------------------------------------------------------------------
    private static final String DEFAULT_EXCEPTION = null;
    private static final String DEFAULT_LOGPATH = null;
    private static final int DEFAULT_LOGSIZE = -1;
    private static final byte[] DEFAULT_MD5 = null;

    //---------------------------------------------------------------------------
    // Constructed Function
    //---------------------------------------------------------------------------
    // <> is *required*
    public UploadLog() {
        this(DEFAULT_EXCEPTION, DEFAULT_LOGPATH, DEFAULT_LOGSIZE, DEFAULT_MD5);
    }

    public UploadLog(String exception, String logPath, int logSize, byte[] md5) {
        this.exception = exception;
        this.logPath = logPath;
        this.logSize = logSize;
        this.md5 = md5;
    }

    //---------------------------------------------------------------------------
    // decode Constructed Function
    //---------------------------------------------------------------------------
    public static UploadLog parseFrom(byte[] bytes) throws InvalidProtocolBufferException {
        log4droid.UploadLog uploadLog = log4droid.UploadLog.parseFrom(bytes);

        String exception = uploadLog.getException();
        String logPath = uploadLog.getLogPath();
        int logSize = uploadLog.getLogSize();
        byte[] md5 = uploadLog.getMd5().toByteArray();


        UploadLog _ret = new UploadLog(exception,logPath,logSize,md5);
        return _ret;
    }


    public UploadLog(log4droid.UploadLog ploadLog) {
        //decode with required fields
        this();
        //---------------------------
        //optional fields
        if (ploadLog.hasException()) {
            this.exception = ploadLog.getException();
        }
        if (ploadLog.hasLogPath()) {
            this.logPath = ploadLog.getLogPath();
        }
        if (ploadLog.hasLogSize()) {
            this.logSize = ploadLog.getLogSize();
        }
        if (ploadLog.hasMd5()) {
            this.md5 = ploadLog.getMd5().toByteArray();
        }
    }

    //---------------------------------------------------------------------------
    // getter Functions
    //---------------------------------------------------------------------------
    //required fields

    //optional fields
    public boolean hasException() {
        return (this.exception != DEFAULT_EXCEPTION);
    }

    public String getException() {
        return this.exception;
    }

    public boolean hasLogPath() {
        return (this.logPath != DEFAULT_LOGPATH);
    }

    public String getLogPath() {
        return this.logPath;
    }

    public boolean hasLogSize() {
        return (this.logSize != DEFAULT_LOGSIZE);
    }

    public int getLogSize() {
        return this.logSize;
    }

    public boolean hasMd5() {
        return (this.md5 != DEFAULT_MD5);
    }

    public byte[] getMd5() {
        return this.md5;
    }

    //---------------------------------------------------------------------------
    // setter Functions
    //---------------------------------------------------------------------------
    public void setException(String exception) {
        this.exception = exception;
    }

    public void setLogPath(String logPath) {
        this.logPath = logPath;
    }

    public void setLogSize(int logSize) {
        this.logSize = logSize;
    }

    public void setMd5(byte[] md5) {
        this.md5 = md5;
    }

    //--------------------------------------
    // encode (Java obj => Proto builder)
    //--------------------------------------

    public int toBytes(ByteBuf buf) {
        log4droid.UploadLog.Builder builder = log4droid.UploadLog.newBuilder();

        //required fields

        //optional fields
        if (hasException()) {
            builder.setException(exception);
        }
        if (hasLogPath()) {
            builder.setLogPath(logPath);
        }
        if (hasLogSize()) {
            builder.setLogSize(logSize);
        }
        if (hasMd5()) {
            builder.setMd5(ByteString.copyFrom(md5));
        }

        byte[] bytes = builder.build().toByteArray();
        buf.writeBytes(bytes);
        return bytes.length;
    }


    public log4droid.UploadLog.Builder toBuilder() {
        log4droid.UploadLog.Builder builder = log4droid.UploadLog.newBuilder();

        //required fields

        //optional fields
        if (hasException()) {
            builder.setException(exception);
        }
        if (hasLogPath()) {
            builder.setLogPath(logPath);
        }
        if (hasLogSize()) {
            builder.setLogSize(logSize);
        }
        if (hasMd5()) {
            builder.setMd5(ByteString.copyFrom(md5));
        }

        //return
        return builder;
    }

    //---------------------------------------------------------------------------
    // toString Function
    //---------------------------------------------------------------------------
    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();

        sb.append("UploadLog { ");

        //required fields

        //optional fields
        if (hasException()) {
            sb.append("exception:").append(exception).append(",");
        }
        if (hasLogPath()) {
            sb.append("logPath:").append(logPath).append(",");
        }
        if (hasLogSize()) {
            sb.append("logSize:").append(logSize).append(",");
        }
        if (hasMd5()) {
            sb.append("md5:").append(ConvUtils.bytesToHexStr(md5)).append(",");
        }

        //remove last ','
        sb.setLength(sb.length() - 1);

        sb.append(" }");

        return sb.toString();
    }
}

