package com.ctf.log4droid.mt_body;

import java.util.ArrayList;
import com.google.protobuf.ByteString;
import com.ctf.ass_public.utils.ConvUtils;
import com.ctf.log4droid.protobuf.log4droid;
import com.ctf.ass_codec.struct.MessageBody;
import com.google.protobuf.InvalidProtocolBufferException;
import io.netty.buffer.ByteBuf;
import com.ctf.log4droid.protobuf.log4droid.GRADE;
import com.ctf.log4droid.protobuf.log4droid.LEVEL;
import com.ctf.log4droid.protobuf.log4droid.TRANSPORT;
import com.ctf.log4droid.protobuf.log4droid.NETWORK_TYPE;
import com.ctf.log4droid.protobuf.log4droid.RSQ;

/*
 * This file is auto generated by *proto_convert*
 *  and should *NOT* be modified manually!!!
 */
public class TermReq extends MessageBody {
    //---------------------------------------------------------------------------
    // ALL fields (private)
    //---------------------------------------------------------------------------
    //required fields

    //optional fields
    private Codes cause;
    private Login login;
    private String alert;
    private UploadLog uploadLog;
    private int sessionId;
    private int logConfig;
    private int pkgConfig;

    //---------------------------------------------------------------------------
    // DEFAULT value for optional fields (private static final)
    //---------------------------------------------------------------------------
    private static final Codes DEFAULT_CAUSE = null;
    private static final Login DEFAULT_LOGIN = null;
    private static final String DEFAULT_ALERT = null;
    private static final UploadLog DEFAULT_UPLOADLOG = null;
    private static final int DEFAULT_SESSIONID = -1;
    private static final int DEFAULT_LOGCONFIG = -1;
    private static final int DEFAULT_PKGCONFIG = -1;

    //---------------------------------------------------------------------------
    // Constructed Function
    //---------------------------------------------------------------------------
    // <> is *required*
    public TermReq() {
        this(DEFAULT_CAUSE, DEFAULT_LOGIN, DEFAULT_ALERT, DEFAULT_UPLOADLOG, DEFAULT_SESSIONID, DEFAULT_LOGCONFIG, DEFAULT_PKGCONFIG);
    }

    public TermReq(Codes cause, Login login, String alert, UploadLog uploadLog, int sessionId, int logConfig, int pkgConfig) {
        this.cause = cause;
        this.login = login;
        this.alert = alert;
        this.uploadLog = uploadLog;
        this.sessionId = sessionId;
        this.logConfig = logConfig;
        this.pkgConfig = pkgConfig;
    }

    //---------------------------------------------------------------------------
    // getter Functions
    //---------------------------------------------------------------------------
    //required fields

    //optional fields
    public boolean hasCause() {
        return (this.cause != DEFAULT_CAUSE);
    }
    public Codes getCause() {
        return this.cause;
    }
    public void setCause(Codes cause){
        this.cause = cause;
    }
    public boolean hasLogin() {
        return (this.login != DEFAULT_LOGIN);
    }
    public Login getLogin() {
        return this.login;
    }
    public void setLogin(Login login){
        this.login = login;
    }
    public boolean hasAlert() {
        return (this.alert != DEFAULT_ALERT);
    }
    public String getAlert() {
        return this.alert;
    }
    public void setAlert(String alert){
        this.alert = alert;
    }
    public boolean hasUploadLog() {
        return (this.uploadLog != DEFAULT_UPLOADLOG);
    }
    public UploadLog getUploadLog() {
        return this.uploadLog;
    }
    public void setUploadLog(UploadLog uploadLog){
        this.uploadLog = uploadLog;
    }
    public boolean hasSessionId() {
        return (this.sessionId != DEFAULT_SESSIONID);
    }
    public int getSessionId() {
        return this.sessionId;
    }
    public void setSessionId(int sessionId){
        this.sessionId = sessionId;
    }
    public boolean hasLogConfig() {
        return (this.logConfig != DEFAULT_LOGCONFIG);
    }
    public int getLogConfig() {
        return this.logConfig;
    }
    public void setLogConfig(int logConfig){
        this.logConfig = logConfig;
    }
    public boolean hasPkgConfig() {
        return (this.pkgConfig != DEFAULT_PKGCONFIG);
    }
    public int getPkgConfig() {
        return this.pkgConfig;
    }
    public void setPkgConfig(int pkgConfig){
        this.pkgConfig = pkgConfig;
    }

    //---------------------------------------------------------------------------
    // decode Function
    //---------------------------------------------------------------------------
    public static TermReq parseFrom(byte[] bytes) throws InvalidProtocolBufferException {
        log4droid.TermRequest _request = log4droid.TermRequest.parseFrom(bytes);

        //required fields

        //decode
        TermReq _req = new TermReq();

        //optional fields
        if (_request.hasCause()) {
            _req.cause = new Codes(_request.getCause());
        }
        if (_request.hasLogin()) {
            _req.login = new Login(_request.getLogin());
        }
        if (_request.hasAlert()) {
            _req.alert = _request.getAlert();
        }
        if (_request.hasUploadLog()) {
            _req.uploadLog = new UploadLog(_request.getUploadLog());
        }
        if (_request.hasSessionId()) {
            _req.sessionId = _request.getSessionId();
        }
        if (_request.hasLogConfig()) {
            _req.logConfig = _request.getLogConfig();
        }
        if (_request.hasPkgConfig()) {
            _req.pkgConfig = _request.getPkgConfig();
        }

        //return
        return _req;
    }
    public log4droid.TermRequest.Builder toBuilder() {
        log4droid.TermRequest.Builder builder = log4droid.TermRequest.newBuilder();
        if (hasCause()) {
            builder.setCause(this.cause.toBuilder());
        }
        if (hasLogin()) {
            builder.setLogin(this.login.toBuilder());
        }
        if (hasAlert()) {
            builder.setAlert(this.alert);
        }
        if (hasUploadLog()) {
            builder.setUploadLog(this.uploadLog.toBuilder());
        }

        if (hasSessionId()) {
            builder.setSessionId(this.sessionId);
        }
        if (hasLogConfig()) {
            builder.setLogConfig(this.logConfig);
        }
        if (hasPkgConfig()) {
            builder.setPkgConfig(this.pkgConfig);
        }
        return builder;

    }
    public TermReq(log4droid.TermRequest termRequest){
        this.cause = new Codes(termRequest.getCause());
        this.login = new Login(termRequest.getLogin());
        this.alert = termRequest.getAlert();
        this.uploadLog = new UploadLog(termRequest.getUploadLog());
        this.sessionId = termRequest.getSessionId();
        this.logConfig = termRequest.getLogConfig();
        this.pkgConfig = termRequest.getPkgConfig();
    }
    //---------------------------------------------------------------------------
    // encode Function
    //---------------------------------------------------------------------------
    @Override
    public int toBytes(ByteBuf buf) {
        log4droid.TermRequest.Builder builder = log4droid.TermRequest.newBuilder();

        //required fields

        //optional fields
        if (hasCause()) {
            builder.setCause(cause.toBuilder());
        }
        if (hasLogin()) {
            builder.setLogin(login.toBuilder());
        }
        if (hasAlert()) {
            builder.setAlert(alert);
        }
        if (hasUploadLog()) {
            builder.setUploadLog(uploadLog.toBuilder());
        }
        if (hasSessionId()) {
            builder.setSessionId(sessionId);
        }
        if (hasLogConfig()) {
            builder.setLogConfig(logConfig);
        }
        if (hasPkgConfig()) {
            builder.setPkgConfig(pkgConfig);
        }

        //encode
        byte[] bytes = builder.build().toByteArray();
        buf.writeBytes(bytes);

        //return
        return bytes.length;
    }

    //---------------------------------------------------------------------------
    // toString Function
    //---------------------------------------------------------------------------
    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();

        sb.append("TermReq { ");

        //required fields

        //optional fields
        if (hasCause()) {
            sb.append("cause:").append(cause).append(",");
        }
        if (hasLogin()) {
            sb.append("login:").append(login).append(",");
        }
        if (hasAlert()) {
            sb.append("alert:").append(alert).append(",");
        }
        if (hasUploadLog()) {
            sb.append("uploadLog:").append(uploadLog).append(",");
        }
        if (hasSessionId()) {
            sb.append("sessionId:").append(sessionId).append(",");
        }
        if (hasLogConfig()) {
            sb.append("logConfig:").append(logConfig).append(",");
        }
        if (hasPkgConfig()) {
            sb.append("pkgConfig:").append(pkgConfig).append(",");
        }

        //remove last ','
        sb.setLength(sb.length() - 1);

        sb.append(" }");

        return sb.toString();
    }
}

