package com.ctf.log4droid.mt_body;

import com.ctf.ass_public.utils.ConvUtils;
import com.ctf.log4droid.protobuf.log4droid;
import com.google.protobuf.ByteString;
import com.google.protobuf.InvalidProtocolBufferException;
import io.netty.buffer.ByteBuf;

import java.io.Serializable;

/*
 * This file is auto generated by *proto_convert*
 *  and should *NOT* be modified manually!!!
 */
public class Term2Server implements Serializable {
    //---------------------------------------------------------------------------
    // ALL fields (private)
    //---------------------------------------------------------------------------
    //required fields

    //optional fields
    private int pkg_uid;
    private int pkg_retry;
    private byte[] signature;
    private int random;
    private TermReq termRequest;
    private TermRsp termResponse;
    private PassThrough passThrough;
    private String exception;
    private byte[] sid;

    //---------------------------------------------------------------------------
    // DEFAULT value for optional fields (private static final)
    //---------------------------------------------------------------------------
    private static final int DEFAULT_PKG_UID = -1;
    private static final int DEFAULT_PKG_RETRY = -1;
    private static final byte[] DEFAULT_SIGNATURE = null;
    private static final int DEFAULT_RANDOM = -1;
    private static final TermReq DEFAULT_TERMREQUEST = null;
    private static final TermRsp DEFAULT_TERMRESPONSE = null;
    private static final PassThrough DEFAULT_PASSTHROUGH = null;
    private static final String DEFAULT_EXCEPTION = null;
    private static final byte[] DEFAULT_SID = null;

    //---------------------------------------------------------------------------
    // Constructed Function
    //---------------------------------------------------------------------------
    // <> is *required*
    public Term2Server() {
        this(DEFAULT_PKG_UID, DEFAULT_PKG_RETRY, DEFAULT_SIGNATURE, DEFAULT_RANDOM, DEFAULT_TERMREQUEST, DEFAULT_TERMRESPONSE, DEFAULT_PASSTHROUGH, DEFAULT_EXCEPTION, DEFAULT_SID);
    }

    public Term2Server(int pkg_uid, int pkg_retry, byte[] signature, int random, TermReq termRequest, TermRsp termResponse, PassThrough passThrough, String exception, byte[] sid) {
        this.pkg_uid = pkg_uid;
        this.pkg_retry = pkg_retry;
        this.signature = signature;
        this.random = random;
        this.termRequest = termRequest;
        this.termResponse = termResponse;
        this.passThrough = passThrough;
        this.exception = exception;
        this.sid = sid;
    }

    //---------------------------------------------------------------------------
    // decode Constructed Function
    //---------------------------------------------------------------------------
    public Term2Server(log4droid.Term2Server erm2Server) {
        //decode with required fields
        this();
        //---------------------------
        //optional fields
        if (erm2Server.hasPkgUid()) {
            this.pkg_uid = erm2Server.getPkgUid();
        }
        if (erm2Server.hasPkgRetry()) {
            this.pkg_retry = erm2Server.getPkgRetry();
        }
        if (erm2Server.hasSignature()) {
            this.signature = erm2Server.getSignature().toByteArray();
        }
        if (erm2Server.hasRandom()) {
            this.random = erm2Server.getRandom();
        }
        if (erm2Server.hasTermRequest()) {
            this.termRequest = new TermReq(erm2Server.getTermRequest());
        }
        if (erm2Server.hasTermResponse()) {
            this.termResponse = new TermRsp(erm2Server.getTermResponse());
        }
        if (erm2Server.hasPassThrough()) {
            this.passThrough = new PassThrough(erm2Server.getPassThrough());
        }
        if (erm2Server.hasException()) {
            this.exception = erm2Server.getException();
        }
        if (erm2Server.hasSid()) {
            this.sid = erm2Server.getSid().toByteArray();
        }
    }

    public static Term2Server parseFrom(byte[] bytes) throws InvalidProtocolBufferException {
        log4droid.Term2Server erm2Server = log4droid.Term2Server.parseFrom(bytes);

        int pkg_uid = erm2Server.getPkgUid();
        int pkg_retry = erm2Server.getPkgRetry();
        byte[] signature = erm2Server.getSignature().toByteArray();
        int random = erm2Server.getRandom();
        TermReq termRequest = new TermReq(erm2Server.getTermRequest());
        TermRsp termResponse = new TermRsp(erm2Server.getTermResponse());
        PassThrough passThrough = new PassThrough(erm2Server.getPassThrough());
        String exception = erm2Server.getException();
        byte[] sid = erm2Server.getSid().toByteArray();

        Term2Server _ret = new Term2Server(pkg_uid, pkg_retry, signature, random, termRequest, termResponse, passThrough, exception, sid);
        return _ret;
    }

    //---------------------------------------------------------------------------
    // getter Functions
    //---------------------------------------------------------------------------
    //required fields

    //optional fields
    public boolean hasPkgUid() {
        return (this.pkg_uid != DEFAULT_PKG_UID);
    }

    public int getPkgUid() {
        return this.pkg_uid;
    }

    public boolean hasPkgRetry() {
        return (this.pkg_retry != DEFAULT_PKG_RETRY);
    }

    public int getPkgRetry() {
        return this.pkg_retry;
    }

    public boolean hasSignature() {
        return (this.signature != DEFAULT_SIGNATURE);
    }

    public byte[] getSignature() {
        return this.signature;
    }

    public boolean hasRandom() {
        return (this.random != DEFAULT_RANDOM);
    }

    public int getRandom() {
        return this.random;
    }

    public boolean hasTermRequest() {
        return (this.termRequest != DEFAULT_TERMREQUEST);
    }

    public TermReq getTermRequest() {
        return this.termRequest;
    }

    public boolean hasTermResponse() {
        return (this.termResponse != DEFAULT_TERMRESPONSE);
    }

    public TermRsp getTermResponse() {
        return this.termResponse;
    }

    public boolean hasPassThrough() {
        return (this.passThrough != DEFAULT_PASSTHROUGH);
    }

    public PassThrough getPassThrough() {
        return this.passThrough;
    }

    public boolean hasException() {
        return (this.exception != DEFAULT_EXCEPTION);
    }

    public String getException() {
        return this.exception;
    }

    public boolean hasSid() {
        return (this.sid != DEFAULT_SID);
    }

    public byte[] getSid() {
        return this.sid;
    }

    //---------------------------------------------------------------------------
    // setter Functions
    //---------------------------------------------------------------------------
    public void setPkgUid(int pkg_uid) {
        this.pkg_uid = pkg_uid;
    }

    public void setPkgRetry(int pkg_retry) {
        this.pkg_retry = pkg_retry;
    }

    public void setSignature(byte[] signature) {
        this.signature = signature;
    }

    public void setRandom(int random) {
        this.random = random;
    }

    public void setTermRequest(TermReq termRequest) {
        this.termRequest = termRequest;
    }

    public void setTermResponse(TermRsp termResponse) {
        this.termResponse = termResponse;
    }

    public void setPassThrough(PassThrough passThrough) {
        this.passThrough = passThrough;
    }

    public void setException(String exception) {
        this.exception = exception;
    }

    public void setSid(byte[] sid) {
        this.sid = sid;
    }

    //--------------------------------------
    // encode (Java obj => Proto builder)
    //--------------------------------------

    public int toBytes(ByteBuf buf) {
        log4droid.Term2Server.Builder builder = log4droid.Term2Server.newBuilder();

        //required fields

        //optional fields
        if (hasPkgUid()) {
            builder.setPkgUid(pkg_uid);
        }
        if (hasPkgRetry()) {
            builder.setPkgRetry(pkg_retry);
        }
        if (hasSignature()) {
            builder.setSignature(ByteString.copyFrom(signature));
        }
        if (hasRandom()) {
            builder.setRandom(random);
        }
        if (hasTermRequest()) {
            builder.setTermRequest(termRequest.toBuilder());
        }
        if (hasTermResponse()) {
            builder.setTermResponse(termResponse.toBuilder());
        }
        if (hasPassThrough()) {
            builder.setPassThrough(passThrough.toBuilder());
        }
        if (hasException()) {
            builder.setException(exception);
        }
        if (hasSid()) {
            builder.setSid(ByteString.copyFrom(sid));
        }

        byte[] bytes = builder.build().toByteArray();
        buf.writeBytes(bytes);
        return bytes.length;
    }

    public log4droid.Term2Server.Builder toBuilder() {
        log4droid.Term2Server.Builder builder = log4droid.Term2Server.newBuilder();

        //required fields

        //optional fields
        if (hasPkgUid()) {
            builder.setPkgUid(pkg_uid);
        }
        if (hasPkgRetry()) {
            builder.setPkgRetry(pkg_retry);
        }
        if (hasSignature()) {
            builder.setSignature(ByteString.copyFrom(signature));
        }
        if (hasRandom()) {
            builder.setRandom(random);
        }
        if (hasTermRequest()) {
            builder.setTermRequest(termRequest.toBuilder());
        }
        if (hasTermResponse()) {
            builder.setTermResponse(termResponse.toBuilder());
        }
        if (hasPassThrough()) {
            builder.setPassThrough(passThrough.toBuilder());
        }
        if (hasException()) {
            builder.setException(exception);
        }
        if (hasSid()) {
            builder.setSid(ByteString.copyFrom(sid));
        }

        //return
        return builder;
    }

    //---------------------------------------------------------------------------
    // toString Function
    //---------------------------------------------------------------------------
    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();

        sb.append("Term2Server { ");

        //required fields

        //optional fields
        if (hasPkgUid()) {
            sb.append("pkg_uid:").append(pkg_uid).append(",");
        }
        if (hasPkgRetry()) {
            sb.append("pkg_retry:").append(pkg_retry).append(",");
        }
        if (hasSignature()) {
            sb.append("signature:").append(ConvUtils.bytesToHexStr(signature)).append(",");
        }
        if (hasRandom()) {
            sb.append("random:").append(random).append(",");
        }
        if (hasTermRequest()) {
            sb.append("termRequest:").append(termRequest).append(",");
        }
        if (hasTermResponse()) {
            sb.append("termResponse:").append(termResponse).append(",");
        }
        if (hasPassThrough()) {
            sb.append("passThrough:").append(passThrough).append(",");
        }
        if (hasException()) {
            sb.append("exception:").append(exception).append(",");
        }
        if (hasSid()) {
            sb.append("sid:").append(ConvUtils.bytesToHexStr(sid)).append(",");
        }

        //remove last ','
        sb.setLength(sb.length() - 1);

        sb.append(" }");

        return sb.toString();
    }
}

