package com.ctf.log4droid.mt_body;

import java.io.*;

import com.google.protobuf.ByteString;
import com.ctf.ass_public.utils.ConvUtils;
import com.ctf.log4droid.protobuf.log4droid;
import com.google.protobuf.ByteString;

import java.util.ArrayList;

import com.ctf.log4droid.protobuf.log4droid.GRADE;
import com.ctf.log4droid.protobuf.log4droid.LEVEL;
import com.ctf.log4droid.protobuf.log4droid.TRANSPORT;
import com.ctf.log4droid.protobuf.log4droid.NETWORK_TYPE;
import com.ctf.log4droid.protobuf.log4droid.RSQ;
import com.ctf.log4droid.protobuf.log4droid._sim.SIM_STATE;
import com.ctf.log4droid.protobuf.log4droid._sim.SIM_TYPE;
import com.google.protobuf.InvalidProtocolBufferException;
import io.netty.buffer.ByteBuf;

/*
 * This file is auto generated by *proto_convert*
 *  and should *NOT* be modified manually!!!
 */
public class Sim implements Serializable {
    //---------------------------------------------------------------------------
    // ALL fields (private)
    //---------------------------------------------------------------------------
    //required fields

    //optional fields
    private byte[] imsi;
    private byte[] img_md5;
    private ArrayList<Cell> cell_list;
    private String pdp;
    private int roaming;
    private String activate;
    private byte[] imei;
    private byte[] iccid;
    private String phonenumber;
    private Cell cell;
    private SIM_STATE state;
    private SIM_TYPE type;

    //---------------------------------------------------------------------------
    // DEFAULT value for optional fields (private static final)
    //---------------------------------------------------------------------------
    private static final byte[] DEFAULT_IMSI = null;
    private static final byte[] DEFAULT_IMG_MD5 = null;
    private static final ArrayList<Cell> DEFAULT_CELL_LIST = null;
    private static final String DEFAULT_PDP = null;
    private static final int DEFAULT_ROAMING = -1;
    private static final String DEFAULT_ACTIVATE = null;
    private static final byte[] DEFAULT_IMEI = null;
    private static final byte[] DEFAULT_ICCID = null;
    private static final String DEFAULT_PHONENUMBER = null;
    private static final Cell DEFAULT_CELL = null;
    private static final SIM_STATE DEFAULT_STATE = null;
    private static final SIM_TYPE DEFAULT_TYPE = null;

    //---------------------------------------------------------------------------
    // Constructed Function
    //---------------------------------------------------------------------------
    // <> is *required*
    public Sim() {
        this(DEFAULT_IMSI, DEFAULT_IMG_MD5, DEFAULT_CELL_LIST, DEFAULT_PDP, DEFAULT_ROAMING, DEFAULT_ACTIVATE, DEFAULT_IMEI, DEFAULT_ICCID, DEFAULT_PHONENUMBER, DEFAULT_CELL, DEFAULT_STATE, DEFAULT_TYPE);
    }

    public Sim(byte[] imsi, byte[] img_md5, ArrayList<Cell> cell_list, String pdp, int roaming, String activate, byte[] imei, byte[] iccid, String phonenumber, Cell cell, SIM_STATE state, SIM_TYPE type) {
        this.imsi = imsi;
        this.img_md5 = img_md5;
        this.cell_list = cell_list;
        this.pdp = pdp;
        this.roaming = roaming;
        this.activate = activate;
        this.imei = imei;
        this.iccid = iccid;
        this.phonenumber = phonenumber;
        this.cell = cell;
        this.state = state;
        this.type = type;
    }

    //---------------------------------------------------------------------------
    // decode Constructed Function
    //---------------------------------------------------------------------------
    private static ArrayList<Cell> getCellList(log4droid._sim sim) {
        ArrayList<Cell> cell_list = new ArrayList<Cell>();
        for (log4droid._cell cell : sim.getCellListList()) {
            cell_list.add(new Cell(cell));
        }
        return cell_list;
    }

    public Sim(log4droid._sim sim) {
        //decode with required fields
        this();
        //---------------------------
        //optional fields
        if (sim.hasImsi()) {
            this.imsi = sim.getImsi().toByteArray();
        }
        if (sim.hasImgMd5()) {
            this.img_md5 = sim.getImgMd5().toByteArray();
        }
        this.cell_list = getCellList(sim);
        if (sim.hasPdp()) {
            this.pdp = sim.getPdp();
        }
        if (sim.hasRoaming()) {
            this.roaming = sim.getRoaming();
        }
        if (sim.hasActivate()) {
            this.activate = sim.getActivate();
        }
        if (sim.hasImei()) {
            this.imei = sim.getImei().toByteArray();
        }
        if (sim.hasIccid()) {
            this.iccid = sim.getIccid().toByteArray();
        }
        if (sim.hasPhonenumber()) {
            this.phonenumber = sim.getPhonenumber();
        }
        if (sim.hasCell()) {
            this.cell = new Cell(sim.getCell());
        }
        if (sim.hasState()) {
            this.state = sim.getState();
        }
        if (sim.hasType()) {
            this.type = sim.getType();
        }
    }

    public static Sim parseFrom(byte[] bytes) throws InvalidProtocolBufferException {
        log4droid._sim sim = log4droid._sim.parseFrom(bytes);

        byte[] imsi = sim.getImsi().toByteArray();
        byte[] img_md5 = sim.getImgMd5().toByteArray();
        ArrayList<Cell> cell_list = getCellList(sim);
        String pdp = sim.getPdp();
        int roaming = sim.getRoaming();
        String activate = sim.getActivate();
        byte[] imei = sim.getImei().toByteArray();
        byte[] iccid = sim.getIccid().toByteArray();
        String phonenumber = sim.getPhonenumber();
        Cell cell = new Cell(sim.getCell());
        SIM_STATE state = sim.getState();
        SIM_TYPE type = sim.getType();

        Sim _ret = new Sim(imsi,img_md5,cell_list,pdp,roaming,activate,imei,iccid,phonenumber,cell,state,type);
        return _ret;
    }

    //---------------------------------------------------------------------------
    // getter Functions
    //---------------------------------------------------------------------------
    //required fields

    //optional fields
    public boolean hasImsi() {
        return (this.imsi != DEFAULT_IMSI);
    }

    public byte[] getImsi() {
        return this.imsi;
    }

    public boolean hasImgMd5() {
        return (this.img_md5 != DEFAULT_IMG_MD5);
    }

    public byte[] getImgMd5() {
        return this.img_md5;
    }

    public boolean hasCellList() {
        return (this.cell_list != DEFAULT_CELL_LIST);
    }

    public ArrayList<Cell> getCellList() {
        return this.cell_list;
    }

    public boolean hasPdp() {
        return (this.pdp != DEFAULT_PDP);
    }

    public String getPdp() {
        return this.pdp;
    }

    public boolean hasRoaming() {
        return (this.roaming != DEFAULT_ROAMING);
    }

    public int getRoaming() {
        return this.roaming;
    }

    public boolean hasActivate() {
        return (this.activate != DEFAULT_ACTIVATE);
    }

    public String getActivate() {
        return this.activate;
    }

    public boolean hasImei() {
        return (this.imei != DEFAULT_IMEI);
    }

    public byte[] getImei() {
        return this.imei;
    }

    public boolean hasIccid() {
        return (this.iccid != DEFAULT_ICCID);
    }

    public byte[] getIccid() {
        return this.iccid;
    }

    public boolean hasPhonenumber() {
        return (this.phonenumber != DEFAULT_PHONENUMBER);
    }

    public String getPhonenumber() {
        return this.phonenumber;
    }

    public boolean hasCell() {
        return (this.cell != DEFAULT_CELL);
    }

    public Cell getCell() {
        return this.cell;
    }

    public boolean hasState() {
        return (this.state != DEFAULT_STATE);
    }

    public SIM_STATE getState() {
        return this.state;
    }

    public boolean hasType() {
        return (this.type != DEFAULT_TYPE);
    }

    public SIM_TYPE getType() {
        return this.type;
    }

    //---------------------------------------------------------------------------
    // setter Functions
    //---------------------------------------------------------------------------
    public void setImsi(byte[] imsi) {
        this.imsi = imsi;
    }

    public void setImgMd5(byte[] img_md5) {
        this.img_md5 = img_md5;
    }

    public void setCellList(ArrayList<Cell> cell_list) {
        this.cell_list = cell_list;
    }

    public void setPdp(String pdp) {
        this.pdp = pdp;
    }

    public void setRoaming(int roaming) {
        this.roaming = roaming;
    }

    public void setActivate(String activate) {
        this.activate = activate;
    }

    public void setImei(byte[] imei) {
        this.imei = imei;
    }

    public void setIccid(byte[] iccid) {
        this.iccid = iccid;
    }

    public void setPhonenumber(String phonenumber) {
        this.phonenumber = phonenumber;
    }

    public void setCell(Cell cell) {
        this.cell = cell;
    }

    public void setState(SIM_STATE state) {
        this.state = state;
    }

    public void setType(SIM_TYPE type) {
        this.type = type;
    }

    //--------------------------------------
    // encode (Java obj => Proto builder)
    //--------------------------------------
    public int toBytes(ByteBuf buf) {
        log4droid._sim.Builder builder = log4droid._sim.newBuilder();

        //required fields

        //optional fields
        if (hasImsi()) {
            builder.setImsi(ByteString.copyFrom(imsi));
        }
        if (hasImgMd5()) {
            builder.setImgMd5(ByteString.copyFrom(img_md5));
        }
        if (hasCellList()) {
            for (int i = 0; i < cell_list.size(); i++) {
                builder.addCellList(cell_list.get(i).toBuilder());
            }
        }
        if (hasPdp()) {
            builder.setPdp(pdp);
        }
        if (hasRoaming()) {
            builder.setRoaming(roaming);
        }
        if (hasActivate()) {
            builder.setActivate(activate);
        }
        if (hasImei()) {
            builder.setImei(ByteString.copyFrom(imei));
        }
        if (hasIccid()) {
            builder.setIccid(ByteString.copyFrom(iccid));
        }
        if (hasPhonenumber()) {
            builder.setPhonenumber(phonenumber);
        }
        if (hasCell()) {
            builder.setCell(cell.toBuilder());
        }
        if (hasState()) {
            builder.setState(state);
        }
        if (hasType()) {
            builder.setType(type);
        }


        byte[] bytes = builder.build().toByteArray();
        buf.writeBytes(bytes);
        return bytes.length;
    }

    public log4droid._sim.Builder toBuilder() {
        log4droid._sim.Builder builder = log4droid._sim.newBuilder();

        //required fields

        //optional fields
        if (hasImsi()) {
            builder.setImsi(ByteString.copyFrom(imsi));
        }
        if (hasImgMd5()) {
            builder.setImgMd5(ByteString.copyFrom(img_md5));
        }
        if (hasCellList()) {
            for (int i = 0; i < cell_list.size(); i++) {
                builder.addCellList(cell_list.get(i).toBuilder());
            }
        }
        if (hasPdp()) {
            builder.setPdp(pdp);
        }
        if (hasRoaming()) {
            builder.setRoaming(roaming);
        }
        if (hasActivate()) {
            builder.setActivate(activate);
        }
        if (hasImei()) {
            builder.setImei(ByteString.copyFrom(imei));
        }
        if (hasIccid()) {
            builder.setIccid(ByteString.copyFrom(iccid));
        }
        if (hasPhonenumber()) {
            builder.setPhonenumber(phonenumber);
        }
        if (hasCell()) {
            builder.setCell(cell.toBuilder());
        }
        if (hasState()) {
            builder.setState(state);
        }
        if (hasType()) {
            builder.setType(type);
        }

        //return
        return builder;
    }

    //---------------------------------------------------------------------------
    // toString Function
    //---------------------------------------------------------------------------
    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();

        sb.append("Sim { ");

        //required fields

        //optional fields
        if (hasImsi()) {
            sb.append("imsi:").append(ConvUtils.bcd2str(imsi)).append(",");
        }
        if (hasImgMd5()) {
            sb.append("img_md5:").append(ConvUtils.bytesToHexStr(img_md5)).append(",");
        }
        if (hasCellList()) {
            sb.append("cell_list:").append(cell_list).append(",");
        }
        if (hasPdp()) {
            sb.append("pdp:").append(pdp).append(",");
        }
        if (hasRoaming()) {
            sb.append("roaming:").append(roaming).append(",");
        }
        if (hasActivate()) {
            sb.append("activate:").append(activate).append(",");
        }
        if (hasImei()) {
            sb.append("imei:").append(ConvUtils.bcd2str(imei)).append(",");
        }
        if (hasIccid()) {
            sb.append("iccid:").append(ConvUtils.bcd2str(iccid)).append(",");
        }
        if (hasPhonenumber()) {
            sb.append("phonenumber:").append(phonenumber).append(",");
        }
        if (hasCell()) {
            sb.append("cell:").append(cell).append(",");
        }
        if (hasState()) {
            sb.append("state:").append(state).append(",");
        }
        if (hasType()) {
            sb.append("type:").append(type).append(",");
        }

        //remove last ','
        sb.setLength(sb.length() - 1);

        sb.append(" }");

        return sb.toString();
    }
}

