package com.ctf.log4droid.mt_body;

import java.io.*;

import com.google.protobuf.ByteString;
import com.ctf.ass_public.utils.ConvUtils;
import com.ctf.log4droid.protobuf.log4droid;
import com.google.protobuf.ByteString;

import java.util.ArrayList;

import com.ctf.log4droid.protobuf.log4droid.GRADE;
import com.ctf.log4droid.protobuf.log4droid.LEVEL;
import com.ctf.log4droid.protobuf.log4droid.TRANSPORT;
import com.ctf.log4droid.protobuf.log4droid.NETWORK_TYPE;
import com.ctf.log4droid.protobuf.log4droid.RSQ;
import com.google.protobuf.InvalidProtocolBufferException;
import io.netty.buffer.ByteBuf;

/*
 * This file is auto generated by *proto_convert*
 *  and should *NOT* be modified manually!!!
 */
public class Wlan implements Serializable {
    //---------------------------------------------------------------------------
    // ALL fields (private)
    //---------------------------------------------------------------------------
    //required fields

    //optional fields
    private String ap_mac;
    private String access_mode;
    private int rssi;
    private RSQ rsq;
    private int up_speed;
    private int dn_speed;
    private float snr;
    private String version;
    private String mac;

    //---------------------------------------------------------------------------
    // DEFAULT value for optional fields (private static final)
    //---------------------------------------------------------------------------
    private static final String DEFAULT_AP_MAC = null;
    private static final String DEFAULT_ACCESS_MODE = null;
    private static final int DEFAULT_RSSI = -1;
    private static final RSQ DEFAULT_RSQ = null;
    private static final int DEFAULT_UP_SPEED = -1;
    private static final int DEFAULT_DN_SPEED = -1;
    private static final float DEFAULT_SNR = -1.0f;
    private static final String DEFAULT_VERSION = null;
    private static final String DEFAULT_MAC = null;

    //---------------------------------------------------------------------------
    // Constructed Function
    //---------------------------------------------------------------------------
    // <> is *required*
    public Wlan() {
        this(DEFAULT_AP_MAC, DEFAULT_ACCESS_MODE, DEFAULT_RSSI, DEFAULT_RSQ, DEFAULT_UP_SPEED, DEFAULT_DN_SPEED, DEFAULT_SNR, DEFAULT_VERSION, DEFAULT_MAC);
    }

    public Wlan(String ap_mac, String access_mode, int rssi, RSQ rsq, int up_speed, int dn_speed, float snr, String version, String mac) {
        this.ap_mac = ap_mac;
        this.access_mode = access_mode;
        this.rssi = rssi;
        this.rsq = rsq;
        this.up_speed = up_speed;
        this.dn_speed = dn_speed;
        this.snr = snr;
        this.version = version;
        this.mac = mac;
    }

    //---------------------------------------------------------------------------
    // decode Constructed Function
    //---------------------------------------------------------------------------

    public static Wlan parseFrom(byte[] bytes) throws InvalidProtocolBufferException {
        log4droid._wlan wlan = log4droid._wlan.parseFrom(bytes);

        String ap_mac = wlan.getApMac();
        String access_mode = wlan.getAccessMode();
        int rssi = wlan.getRssi();
        RSQ rsq = wlan.getRsq();
        int up_speed = wlan.getUpSpeed();
        int dn_speed = wlan.getDnSpeed();
        float snr = wlan.getSnr();
        String version = wlan.getVersion();
        String mac = wlan.getMac();

        Wlan _ret = new Wlan(ap_mac,access_mode,rssi,rsq,up_speed,dn_speed,snr,version,mac);
        return _ret;
    }

    public Wlan(log4droid._wlan wlan) {
        //decode with required fields
        this();
        //---------------------------
        //optional fields
        if (wlan.hasApMac()) {
            this.ap_mac = wlan.getApMac();
        }
        if (wlan.hasAccessMode()) {
            this.access_mode = wlan.getAccessMode();
        }
        if (wlan.hasRssi()) {
            this.rssi = wlan.getRssi();
        }
        if (wlan.hasRsq()) {
            this.rsq = wlan.getRsq();
        }
        if (wlan.hasUpSpeed()) {
            this.up_speed = wlan.getUpSpeed();
        }
        if (wlan.hasDnSpeed()) {
            this.dn_speed = wlan.getDnSpeed();
        }
        if (wlan.hasSnr()) {
            this.snr = wlan.getSnr();
        }
        if (wlan.hasVersion()) {
            this.version = wlan.getVersion();
        }
        if (wlan.hasMac()) {
            this.mac = wlan.getMac();
        }
    }

    //---------------------------------------------------------------------------
    // getter Functions
    //---------------------------------------------------------------------------
    //required fields

    //optional fields
    public boolean hasApMac() {
        return (this.ap_mac != DEFAULT_AP_MAC);
    }

    public String getApMac() {
        return this.ap_mac;
    }

    public boolean hasAccessMode() {
        return (this.access_mode != DEFAULT_ACCESS_MODE);
    }

    public String getAccessMode() {
        return this.access_mode;
    }

    public boolean hasRssi() {
        return (this.rssi != DEFAULT_RSSI);
    }

    public int getRssi() {
        return this.rssi;
    }

    public boolean hasRsq() {
        return (this.rsq != DEFAULT_RSQ);
    }

    public RSQ getRsq() {
        return this.rsq;
    }

    public boolean hasUpSpeed() {
        return (this.up_speed != DEFAULT_UP_SPEED);
    }

    public int getUpSpeed() {
        return this.up_speed;
    }

    public boolean hasDnSpeed() {
        return (this.dn_speed != DEFAULT_DN_SPEED);
    }

    public int getDnSpeed() {
        return this.dn_speed;
    }

    public boolean hasSnr() {
        return (this.snr != DEFAULT_SNR);
    }

    public float getSnr() {
        return this.snr;
    }

    public boolean hasVersion() {
        return (this.version != DEFAULT_VERSION);
    }

    public String getVersion() {
        return this.version;
    }

    public boolean hasMac() {
        return (this.mac != DEFAULT_MAC);
    }

    public String getMac() {
        return this.mac;
    }

    //---------------------------------------------------------------------------
    // setter Functions
    //---------------------------------------------------------------------------
    public void setApMac(String ap_mac) {
        this.ap_mac = ap_mac;
    }

    public void setAccessMode(String access_mode) {
        this.access_mode = access_mode;
    }

    public void setRssi(int rssi) {
        this.rssi = rssi;
    }

    public void setRsq(RSQ rsq) {
        this.rsq = rsq;
    }

    public void setUpSpeed(int up_speed) {
        this.up_speed = up_speed;
    }

    public void setDnSpeed(int dn_speed) {
        this.dn_speed = dn_speed;
    }

    public void setSnr(float snr) {
        this.snr = snr;
    }

    public void setVersion(String version) {
        this.version = version;
    }

    public void setMac(String mac) {
        this.mac = mac;
    }
    //--------------------------------------
    // encode (Java obj => Proto builder)
    //--------------------------------------


    public int toBytes(ByteBuf buf) {
        log4droid._wlan.Builder builder = log4droid._wlan.newBuilder();

        //required fields

        //optional fields
        if (hasApMac()) {
            builder.setApMac(ap_mac);
        }
        if (hasAccessMode()) {
            builder.setAccessMode(access_mode);
        }
        if (hasRssi()) {
            builder.setRssi(rssi);
        }
        if (hasRsq()) {
            builder.setRsq(rsq);
        }
        if (hasUpSpeed()) {
            builder.setUpSpeed(up_speed);
        }
        if (hasDnSpeed()) {
            builder.setDnSpeed(dn_speed);
        }
        if (hasSnr()) {
            builder.setSnr(snr);
        }
        if (hasVersion()) {
            builder.setVersion(version);
        }
        if (hasMac()) {
            builder.setMac(mac);
        }

        byte[] bytes = builder.build().toByteArray();
        buf.writeBytes(bytes);
        return bytes.length;
    }

    public log4droid._wlan.Builder toBuilder() {
        log4droid._wlan.Builder builder = log4droid._wlan.newBuilder();

        //required fields

        //optional fields
        if (hasApMac()) {
            builder.setApMac(ap_mac);
        }
        if (hasAccessMode()) {
            builder.setAccessMode(access_mode);
        }
        if (hasRssi()) {
            builder.setRssi(rssi);
        }
        if (hasRsq()) {
            builder.setRsq(rsq);
        }
        if (hasUpSpeed()) {
            builder.setUpSpeed(up_speed);
        }
        if (hasDnSpeed()) {
            builder.setDnSpeed(dn_speed);
        }
        if (hasSnr()) {
            builder.setSnr(snr);
        }
        if (hasVersion()) {
            builder.setVersion(version);
        }
        if (hasMac()) {
            builder.setMac(mac);
        }

        //return
        return builder;
    }

    //---------------------------------------------------------------------------
    // toString Function
    //---------------------------------------------------------------------------
    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();

        sb.append("Wlan { ");

        //required fields

        //optional fields
        if (hasApMac()) {
            sb.append("ap_mac:").append(ap_mac).append(",");
        }
        if (hasAccessMode()) {
            sb.append("access_mode:").append(access_mode).append(",");
        }
        if (hasRssi()) {
            sb.append("rssi:").append(rssi).append(",");
        }
        if (hasRsq()) {
            sb.append("rsq:").append(rsq).append(",");
        }
        if (hasUpSpeed()) {
            sb.append("up_speed:").append(up_speed).append(",");
        }
        if (hasDnSpeed()) {
            sb.append("dn_speed:").append(dn_speed).append(",");
        }
        if (hasSnr()) {
            sb.append("snr:").append(snr).append(",");
        }
        if (hasVersion()) {
            sb.append("version:").append(version).append(",");
        }
        if (hasMac()) {
            sb.append("mac:").append(mac).append(",");
        }

        //remove last ','
        sb.setLength(sb.length() - 1);

        sb.append(" }");

        return sb.toString();
    }
}

