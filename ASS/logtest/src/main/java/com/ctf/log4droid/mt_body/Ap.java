package com.ctf.log4droid.mt_body;

import com.ctf.log4droid.protobuf.log4droid;
import com.ctf.log4droid.protobuf.log4droid._ap;
import com.ctf.log4droid.protobuf.log4droid._ap.Builder;
import com.ctf.log4droid.protobuf.log4droid.TRANSPORT;
import com.google.protobuf.InvalidProtocolBufferException;
import io.netty.buffer.ByteBuf;

import java.io.Serializable;

/*
 * This file is auto generated by *proto_convert*
 *  and should *NOT* be modified manually!!!
 */
public class Ap  implements Serializable{
    //---------------------------------------------------------------------------
    // ALL fields (private)
    //---------------------------------------------------------------------------
    //required fields

    //optional fields
    private String fg_app;
    private int display;
    private TRANSPORT transport;
    private int fly_mode;
    private String version;
    private String serialno;
    private String model;
    private String buildno;
    private String ruimd_ver;
    private String ruimd_ini_ver;
    private String sw_ver;
    private String hw_ver;

    //---------------------------------------------------------------------------
    // DEFAULT value for optional fields (private static final)
    //---------------------------------------------------------------------------
    private static final String DEFAULT_FG_APP = null;
    private static final int DEFAULT_DISPLAY = -1;
    private static final TRANSPORT DEFAULT_TRANSPORT = null;
    private static final int DEFAULT_FLY_MODE = -1;
    private static final String DEFAULT_VERSION = null;
    private static final String DEFAULT_SERIALNO = null;
    private static final String DEFAULT_MODEL = null;
    private static final String DEFAULT_BUILDNO = null;
    private static final String DEFAULT_RUIMD_VER = null;
    private static final String DEFAULT_RUIMD_INI_VER = null;
    private static final String DEFAULT_SW_VER = null;
    private static final String DEFAULT_HW_VER = null;

    //---------------------------------------------------------------------------
    // Constructed Function
    //---------------------------------------------------------------------------
    // <> is *required*
    public Ap() {
        this(DEFAULT_FG_APP, DEFAULT_DISPLAY, DEFAULT_TRANSPORT, DEFAULT_FLY_MODE, DEFAULT_VERSION, DEFAULT_SERIALNO, DEFAULT_MODEL, DEFAULT_BUILDNO, DEFAULT_RUIMD_VER, DEFAULT_RUIMD_INI_VER, DEFAULT_SW_VER, DEFAULT_HW_VER);
    }

    public Ap(String fg_app, int display, TRANSPORT transport, int fly_mode, String version, String serialno, String model, String buildno, String ruimd_ver, String ruimd_ini_ver, String sw_ver, String hw_ver) {
        this.fg_app = fg_app;
        this.display = display;
        this.transport = transport;
        this.fly_mode = fly_mode;
        this.version = version;
        this.serialno = serialno;
        this.model = model;
        this.buildno = buildno;
        this.ruimd_ver = ruimd_ver;
        this.ruimd_ini_ver = ruimd_ini_ver;
        this.sw_ver = sw_ver;
        this.hw_ver = hw_ver;
    }

    public Ap(log4droid._ap ap) {
        //decode with required fields
        this();
        //---------------------------
        //optional fields
        if (ap.hasFgApp()) {
            this.fg_app = ap.getFgApp();
        }
        if (ap.hasDisplay()) {
            this.display = ap.getDisplay();
        }
        if (ap.hasTransport()) {
            this.transport = ap.getTransport();
        }
        if (ap.hasFlyMode()) {
            this.fly_mode = ap.getFlyMode();
        }
        if (ap.hasVersion()) {
            this.version = ap.getVersion();
        }
        if (ap.hasSerialno()) {
            this.serialno = ap.getSerialno();
        }
        if (ap.hasModel()) {
            this.model = ap.getModel();
        }
        if (ap.hasBuildno()) {
            this.buildno = ap.getBuildno();
        }
        if (ap.hasRuimdVer()) {
            this.ruimd_ver = ap.getRuimdVer();
        }
        if (ap.hasRuimdIniVer()) {
            this.ruimd_ini_ver = ap.getRuimdIniVer();
        }
        if (ap.hasSwVer()) {
            this.sw_ver = ap.getSwVer();
        }
        if (ap.hasHwVer()) {
            this.hw_ver = ap.getHwVer();
        }
    }
    //---------------------------------------------------------------------------
    // getter Functions
    //---------------------------------------------------------------------------
    //required fields

    //optional fields
    public boolean hasFgApp() {
        return (this.fg_app != DEFAULT_FG_APP);
    }
    public String getFgApp() {
        return this.fg_app;
    }
    public boolean hasDisplay() {
        return (this.display != DEFAULT_DISPLAY);
    }
    public int getDisplay() {
        return this.display;
    }
    public boolean hasTransport() {
        return (this.transport != DEFAULT_TRANSPORT);
    }
    public TRANSPORT getTransport() {
        return this.transport;
    }
    public boolean hasFlyMode() {
        return (this.fly_mode != DEFAULT_FLY_MODE);
    }
    public int getFlyMode() {
        return this.fly_mode;
    }
    public boolean hasVersion() {
        return (this.version != DEFAULT_VERSION);
    }
    public String getVersion() {
        return this.version;
    }
    public boolean hasSerialno() {
        return (this.serialno != DEFAULT_SERIALNO);
    }
    public String getSerialno() {
        return this.serialno;
    }
    public boolean hasModel() {
        return (this.model != DEFAULT_MODEL);
    }
    public String getModel() {
        return this.model;
    }
    public boolean hasBuildno() {
        return (this.buildno != DEFAULT_BUILDNO);
    }
    public String getBuildno() {
        return this.buildno;
    }
    public boolean hasRuimdVer() {
        return (this.ruimd_ver != DEFAULT_RUIMD_VER);
    }
    public String getRuimdVer() {
        return this.ruimd_ver;
    }
    public boolean hasRuimdIniVer() {
        return (this.ruimd_ini_ver != DEFAULT_RUIMD_INI_VER);
    }
    public String getRuimdIniVer() {
        return this.ruimd_ini_ver;
    }
    public boolean hasSwVer() {
        return (this.sw_ver != DEFAULT_SW_VER);
    }
    public String getSwVer() {
        return this.sw_ver;
    }
    public boolean hasHwVer() {
        return (this.hw_ver != DEFAULT_HW_VER);
    }
    public String getHwVer() {
        return this.hw_ver;
    }

    //---------------------------------------------------------------------------
    // setter Functions
    //---------------------------------------------------------------------------
    public void setFgApp(String fg_app){
        this.fg_app = fg_app;
    }
    public void setDisplay(int display){
        this.display = display;
    }
    public void setTransport(TRANSPORT transport){
        this.transport = transport;
    }
    public void setFlyMode(int fly_mode){
        this.fly_mode = fly_mode;
    }
    public void setVersion(String version){
        this.version = version;
    }
    public void setSerialno(String serialno){
        this.serialno = serialno;
    }
    public void setModel(String model){
        this.model = model;
    }
    public void setBuildno(String buildno){
        this.buildno = buildno;
    }
    public void setRuimdVer(String ruimd_ver){
        this.ruimd_ver = ruimd_ver;
    }
    public void setRuimdIniVer(String ruimd_ini_ver){
        this.ruimd_ini_ver = ruimd_ini_ver;
    }
    public void setSwVer(String sw_ver){
        this.sw_ver = sw_ver;
    }
    public void setHwVer(String hw_ver){
        this.hw_ver = hw_ver;
    }
   //--------------------------------------
   // encode (Java obj => Proto builder)
   //--------------------------------------

    public static Ap parseFrom(byte[] bytes) throws InvalidProtocolBufferException {
        _ap ap = _ap.parseFrom(bytes);

        String fg_app = ap.getFgApp();
        int display = ap.getDisplay();
        TRANSPORT transport = ap.getTransport();
        int fly_mode = ap.getFlyMode();
        String version = ap.getVersion();
        String serialno = ap.getSerialno();
        String model = ap.getModel();
        String buildno = ap.getBuildno();
        String ruimd_ver = ap.getRuimdVer();
        String ruimd_ini_ver = ap.getRuimdIniVer();
        String sw_ver = ap.getSwVer();
        String hw_ver = ap.getHwVer();

        Ap _ret = new Ap(fg_app,display,transport,fly_mode,version,serialno,model,buildno,ruimd_ver,ruimd_ini_ver,sw_ver,hw_ver);
        return _ret;
    }

    public int toBytes(ByteBuf buf) {
        Builder builder = _ap.newBuilder();
        builder.setFgApp(this.fg_app);
        builder.setDisplay(this.display);
        builder.setTransport(this.transport);
        builder.setFlyMode(this.fly_mode);
        builder.setVersion(this.version);
        builder.setSerialno(this.serialno);
        builder.setModel(this.model);
        builder.setBuildno(this.buildno);
        builder.setRuimdVer(this.ruimd_ver);
        builder.setRuimdIniVer(this.ruimd_ini_ver);
        builder.setSwVer(this.sw_ver);
        builder.setHwVer(this.hw_ver);

        byte[] bytes = builder.build().toByteArray();
        buf.writeBytes(bytes);
        return bytes.length;
    }
    public log4droid._ap.Builder toBuilder() {
        log4droid._ap.Builder builder = log4droid._ap.newBuilder();

        //required fields

        //optional fields
        if (hasFgApp()) {
            builder.setFgApp(fg_app);
        }
        if (hasDisplay()) {
            builder.setDisplay(display);
        }
        if (hasTransport()) {
            builder.setTransport(transport);
        }
        if (hasFlyMode()) {
            builder.setFlyMode(fly_mode);
        }
        if (hasVersion()) {
            builder.setVersion(version);
        }
        if (hasSerialno()) {
            builder.setSerialno(serialno);
        }
        if (hasModel()) {
            builder.setModel(model);
        }
        if (hasBuildno()) {
            builder.setBuildno(buildno);
        }
        if (hasRuimdVer()) {
            builder.setRuimdVer(ruimd_ver);
        }
        if (hasRuimdIniVer()) {
            builder.setRuimdIniVer(ruimd_ini_ver);
        }
        if (hasSwVer()) {
            builder.setSwVer(sw_ver);
        }
        if (hasHwVer()) {
            builder.setHwVer(hw_ver);
        }

        //return
        return builder;
    }
    //---------------------------------------------------------------------------
    // toString Function
    //---------------------------------------------------------------------------
    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();

        sb.append("Ap { ");

        //required fields

        //optional fields
        if (hasFgApp()) {
            sb.append("fg_app:").append(fg_app).append(",");
        }
        if (hasDisplay()) {
            sb.append("display:").append(display).append(",");
        }
        if (hasTransport()) {
            sb.append("transport:").append(transport).append(",");
        }
        if (hasFlyMode()) {
            sb.append("fly_mode:").append(fly_mode).append(",");
        }
        if (hasVersion()) {
            sb.append("version:").append(version).append(",");
        }
        if (hasSerialno()) {
            sb.append("serialno:").append(serialno).append(",");
        }
        if (hasModel()) {
            sb.append("model:").append(model).append(",");
        }
        if (hasBuildno()) {
            sb.append("buildno:").append(buildno).append(",");
        }
        if (hasRuimdVer()) {
            sb.append("ruimd_ver:").append(ruimd_ver).append(",");
        }
        if (hasRuimdIniVer()) {
            sb.append("ruimd_ini_ver:").append(ruimd_ini_ver).append(",");
        }
        if (hasSwVer()) {
            sb.append("sw_ver:").append(sw_ver).append(",");
        }
        if (hasHwVer()) {
            sb.append("hw_ver:").append(hw_ver).append(",");
        }

        //remove last ','
        sb.setLength(sb.length() - 1);

        sb.append(" }");

        return sb.toString();
    }
}

